/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// GoalsAPIService GoalsAPI service
type GoalsAPIService service

type ApiUsersUserGuidGoalsGetRequest struct {
	ctx context.Context
	ApiService *GoalsAPIService
	userGuid string
	page *string
	recordsPerAge *string
}

// Results are returned in paginated sets, this is the page of the results you would like to view. Defaults to page 1 if no page is specified.
func (r ApiUsersUserGuidGoalsGetRequest) Page(page string) ApiUsersUserGuidGoalsGetRequest {
	r.page = &page
	return r
}

// The supported range is from 10 to 1000. If the records_per_page parameter is not specified or is outside this range, a default of 25 records per page will be used.
func (r ApiUsersUserGuidGoalsGetRequest) RecordsPerAge(recordsPerAge string) ApiUsersUserGuidGoalsGetRequest {
	r.recordsPerAge = &recordsPerAge
	return r
}

func (r ApiUsersUserGuidGoalsGetRequest) Execute() (*GoalsResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidGoalsGetExecute(r)
}

/*
UsersUserGuidGoalsGet List goals

List all goals a user can set.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user.
 @return ApiUsersUserGuidGoalsGetRequest
*/
func (a *GoalsAPIService) UsersUserGuidGoalsGet(ctx context.Context, userGuid string) ApiUsersUserGuidGoalsGetRequest {
	return ApiUsersUserGuidGoalsGetRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return GoalsResponseBody
func (a *GoalsAPIService) UsersUserGuidGoalsGetExecute(r ApiUsersUserGuidGoalsGetRequest) (*GoalsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoalsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoalsAPIService.UsersUserGuidGoalsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/goals"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerAge != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_age", r.recordsPerAge, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidGoalsGoalGuidDeleteRequest struct {
	ctx context.Context
	ApiService *GoalsAPIService
	goalGuid string
	userGuid string
}

func (r ApiUsersUserGuidGoalsGoalGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UsersUserGuidGoalsGoalGuidDeleteExecute(r)
}

/*
UsersUserGuidGoalsGoalGuidDelete Delete a goal

Delete a goal.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param goalGuid The unique identifier for a goal. Defined by MX.
 @param userGuid The unique identifier for a user.
 @return ApiUsersUserGuidGoalsGoalGuidDeleteRequest
*/
func (a *GoalsAPIService) UsersUserGuidGoalsGoalGuidDelete(ctx context.Context, goalGuid string, userGuid string) ApiUsersUserGuidGoalsGoalGuidDeleteRequest {
	return ApiUsersUserGuidGoalsGoalGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		goalGuid: goalGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *GoalsAPIService) UsersUserGuidGoalsGoalGuidDeleteExecute(r ApiUsersUserGuidGoalsGoalGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoalsAPIService.UsersUserGuidGoalsGoalGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/goals/{goal_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"goal_guid"+"}", url.PathEscape(parameterValueToString(r.goalGuid, "goalGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUserGuidGoalsGoalGuidGetRequest struct {
	ctx context.Context
	ApiService *GoalsAPIService
	goalGuid string
	userGuid string
}

func (r ApiUsersUserGuidGoalsGoalGuidGetRequest) Execute() (*GoalResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidGoalsGoalGuidGetExecute(r)
}

/*
UsersUserGuidGoalsGoalGuidGet Read a goal

Read a specific goal.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param goalGuid The unique identifier for a goal. Defined by MX.
 @param userGuid The unique identifier for a user.
 @return ApiUsersUserGuidGoalsGoalGuidGetRequest
*/
func (a *GoalsAPIService) UsersUserGuidGoalsGoalGuidGet(ctx context.Context, goalGuid string, userGuid string) ApiUsersUserGuidGoalsGoalGuidGetRequest {
	return ApiUsersUserGuidGoalsGoalGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		goalGuid: goalGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return GoalResponseBody
func (a *GoalsAPIService) UsersUserGuidGoalsGoalGuidGetExecute(r ApiUsersUserGuidGoalsGoalGuidGetRequest) (*GoalResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoalResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoalsAPIService.UsersUserGuidGoalsGoalGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/goals/{goal_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"goal_guid"+"}", url.PathEscape(parameterValueToString(r.goalGuid, "goalGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidGoalsGoalGuidPutRequest struct {
	ctx context.Context
	ApiService *GoalsAPIService
	goalGuid string
	userGuid string
	updateGoalRequestBody *UpdateGoalRequestBody
}

func (r ApiUsersUserGuidGoalsGoalGuidPutRequest) UpdateGoalRequestBody(updateGoalRequestBody UpdateGoalRequestBody) ApiUsersUserGuidGoalsGoalGuidPutRequest {
	r.updateGoalRequestBody = &updateGoalRequestBody
	return r
}

func (r ApiUsersUserGuidGoalsGoalGuidPutRequest) Execute() (*GoalResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidGoalsGoalGuidPutExecute(r)
}

/*
UsersUserGuidGoalsGoalGuidPut Update a goal

This endpoint updates a specific goal.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param goalGuid The unique identifier for a goal. Defined by MX.
 @param userGuid The unique identifier for a user.
 @return ApiUsersUserGuidGoalsGoalGuidPutRequest
*/
func (a *GoalsAPIService) UsersUserGuidGoalsGoalGuidPut(ctx context.Context, goalGuid string, userGuid string) ApiUsersUserGuidGoalsGoalGuidPutRequest {
	return ApiUsersUserGuidGoalsGoalGuidPutRequest{
		ApiService: a,
		ctx: ctx,
		goalGuid: goalGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return GoalResponseBody
func (a *GoalsAPIService) UsersUserGuidGoalsGoalGuidPutExecute(r ApiUsersUserGuidGoalsGoalGuidPutRequest) (*GoalResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoalResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoalsAPIService.UsersUserGuidGoalsGoalGuidPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/goals/{goal_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"goal_guid"+"}", url.PathEscape(parameterValueToString(r.goalGuid, "goalGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateGoalRequestBody == nil {
		return localVarReturnValue, nil, reportError("updateGoalRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateGoalRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidGoalsPostRequest struct {
	ctx context.Context
	ApiService *GoalsAPIService
	userGuid string
	goalRequestBody *GoalRequestBody
}

func (r ApiUsersUserGuidGoalsPostRequest) GoalRequestBody(goalRequestBody GoalRequestBody) ApiUsersUserGuidGoalsPostRequest {
	r.goalRequestBody = &goalRequestBody
	return r
}

func (r ApiUsersUserGuidGoalsPostRequest) Execute() (*GoalResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidGoalsPostExecute(r)
}

/*
UsersUserGuidGoalsPost Create a goal

Create a goal. This endpoint accepts the optional `MX-Skip-Webhook` header and `skip_webhook` parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user.
 @return ApiUsersUserGuidGoalsPostRequest
*/
func (a *GoalsAPIService) UsersUserGuidGoalsPost(ctx context.Context, userGuid string) ApiUsersUserGuidGoalsPostRequest {
	return ApiUsersUserGuidGoalsPostRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return GoalResponseBody
func (a *GoalsAPIService) UsersUserGuidGoalsPostExecute(r ApiUsersUserGuidGoalsPostRequest) (*GoalResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoalResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoalsAPIService.UsersUserGuidGoalsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/goals"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.goalRequestBody == nil {
		return localVarReturnValue, nil, reportError("goalRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.goalRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidGoalsRepositionPutRequest struct {
	ctx context.Context
	ApiService *GoalsAPIService
	userGuid string
	repositionRequestBody *RepositionRequestBody
}

func (r ApiUsersUserGuidGoalsRepositionPutRequest) RepositionRequestBody(repositionRequestBody RepositionRequestBody) ApiUsersUserGuidGoalsRepositionPutRequest {
	r.repositionRequestBody = &repositionRequestBody
	return r
}

func (r ApiUsersUserGuidGoalsRepositionPutRequest) Execute() (*RepositionResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidGoalsRepositionPutExecute(r)
}

/*
UsersUserGuidGoalsRepositionPut Reposition goals

This endpoint repositions goal priority levels. If one goal is set to a lower priority, then any other goals need to be adjusted accordingly.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user.
 @return ApiUsersUserGuidGoalsRepositionPutRequest
*/
func (a *GoalsAPIService) UsersUserGuidGoalsRepositionPut(ctx context.Context, userGuid string) ApiUsersUserGuidGoalsRepositionPutRequest {
	return ApiUsersUserGuidGoalsRepositionPutRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return RepositionResponseBody
func (a *GoalsAPIService) UsersUserGuidGoalsRepositionPutExecute(r ApiUsersUserGuidGoalsRepositionPutRequest) (*RepositionResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RepositionResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GoalsAPIService.UsersUserGuidGoalsRepositionPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/goals/reposition"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repositionRequestBody == nil {
		return localVarReturnValue, nil, reportError("repositionRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repositionRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
