/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InsightsAPIService InsightsAPI service
type InsightsAPIService service

type ApiListAccountsInsightRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	insightGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListAccountsInsightRequest) Page(page int32) ApiListAccountsInsightRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListAccountsInsightRequest) RecordsPerPage(recordsPerPage int32) ApiListAccountsInsightRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListAccountsInsightRequest) Execute() (*AccountsResponseBody, *http.Response, error) {
	return r.ApiService.ListAccountsInsightExecute(r)
}

/*
ListAccountsInsight List all accounts associated with an insight.

Use this endpoint to list all the accounts associated with the insight.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param insightGuid The unique identifier for the insight. Defined by MX.
 @return ApiListAccountsInsightRequest
*/
func (a *InsightsAPIService) ListAccountsInsight(ctx context.Context, userGuid string, insightGuid string) ApiListAccountsInsightRequest {
	return ApiListAccountsInsightRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		insightGuid: insightGuid,
	}
}

// Execute executes the request
//  @return AccountsResponseBody
func (a *InsightsAPIService) ListAccountsInsightExecute(r ApiListAccountsInsightRequest) (*AccountsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ListAccountsInsight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights/{insight_guid}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"insight_guid"+"}", url.PathEscape(parameterValueToString(r.insightGuid, "insightGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCategoriesInsightRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	insightGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListCategoriesInsightRequest) Page(page int32) ApiListCategoriesInsightRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListCategoriesInsightRequest) RecordsPerPage(recordsPerPage int32) ApiListCategoriesInsightRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListCategoriesInsightRequest) Execute() (*CategoriesResponseBody, *http.Response, error) {
	return r.ApiService.ListCategoriesInsightExecute(r)
}

/*
ListCategoriesInsight List all categories associated with an insight.

Use this endpoint to list all the categories associated with the insight.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param insightGuid The unique identifier for the insight. Defined by MX.
 @return ApiListCategoriesInsightRequest
*/
func (a *InsightsAPIService) ListCategoriesInsight(ctx context.Context, userGuid string, insightGuid string) ApiListCategoriesInsightRequest {
	return ApiListCategoriesInsightRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		insightGuid: insightGuid,
	}
}

// Execute executes the request
//  @return CategoriesResponseBody
func (a *InsightsAPIService) ListCategoriesInsightExecute(r ApiListCategoriesInsightRequest) (*CategoriesResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoriesResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ListCategoriesInsight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights/{insight_guid}/categories"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"insight_guid"+"}", url.PathEscape(parameterValueToString(r.insightGuid, "insightGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInsightsByAccountRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	accountGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListInsightsByAccountRequest) Page(page int32) ApiListInsightsByAccountRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListInsightsByAccountRequest) RecordsPerPage(recordsPerPage int32) ApiListInsightsByAccountRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListInsightsByAccountRequest) Execute() (*InsightsResponseBody, *http.Response, error) {
	return r.ApiService.ListInsightsByAccountExecute(r)
}

/*
ListInsightsByAccount List insights by account

Use this endpoint to list all insights associated with a specified account GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for the `account`.
 @param userGuid The unique id for the `user`.
 @return ApiListInsightsByAccountRequest
*/
func (a *InsightsAPIService) ListInsightsByAccount(ctx context.Context, accountGuid string, userGuid string) ApiListInsightsByAccountRequest {
	return ApiListInsightsByAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return InsightsResponseBody
func (a *InsightsAPIService) ListInsightsByAccountExecute(r ApiListInsightsByAccountRequest) (*InsightsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InsightsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ListInsightsByAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts/{account_guid}/insights"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInsightsUserRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListInsightsUserRequest) Page(page int32) ApiListInsightsUserRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListInsightsUserRequest) RecordsPerPage(recordsPerPage int32) ApiListInsightsUserRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListInsightsUserRequest) Execute() (*InsightsResponseBody, *http.Response, error) {
	return r.ApiService.ListInsightsUserExecute(r)
}

/*
ListInsightsUser List all insights for a user.

Use this endpoint to list all the insights associated with the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @return ApiListInsightsUserRequest
*/
func (a *InsightsAPIService) ListInsightsUser(ctx context.Context, userGuid string) ApiListInsightsUserRequest {
	return ApiListInsightsUserRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return InsightsResponseBody
func (a *InsightsAPIService) ListInsightsUserExecute(r ApiListInsightsUserRequest) (*InsightsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InsightsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ListInsightsUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMerchantsInsightRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	insightGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListMerchantsInsightRequest) Page(page int32) ApiListMerchantsInsightRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListMerchantsInsightRequest) RecordsPerPage(recordsPerPage int32) ApiListMerchantsInsightRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListMerchantsInsightRequest) Execute() (*MerchantsResponseBody, *http.Response, error) {
	return r.ApiService.ListMerchantsInsightExecute(r)
}

/*
ListMerchantsInsight List all merchants associated with an insight.

Use this endpoint to list all the merchants associated with the insight.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param insightGuid The unique identifier for the insight. Defined by MX.
 @return ApiListMerchantsInsightRequest
*/
func (a *InsightsAPIService) ListMerchantsInsight(ctx context.Context, userGuid string, insightGuid string) ApiListMerchantsInsightRequest {
	return ApiListMerchantsInsightRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		insightGuid: insightGuid,
	}
}

// Execute executes the request
//  @return MerchantsResponseBody
func (a *InsightsAPIService) ListMerchantsInsightExecute(r ApiListMerchantsInsightRequest) (*MerchantsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ListMerchantsInsight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights/{insight_guid}/merchants"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"insight_guid"+"}", url.PathEscape(parameterValueToString(r.insightGuid, "insightGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListScheduledPaymentsInsightRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	insightGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListScheduledPaymentsInsightRequest) Page(page int32) ApiListScheduledPaymentsInsightRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListScheduledPaymentsInsightRequest) RecordsPerPage(recordsPerPage int32) ApiListScheduledPaymentsInsightRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListScheduledPaymentsInsightRequest) Execute() (*ScheduledPaymentsResponseBody, *http.Response, error) {
	return r.ApiService.ListScheduledPaymentsInsightExecute(r)
}

/*
ListScheduledPaymentsInsight List all scheduled payments associated with an insight

Use this endpoint to list all the scheduled payments associated with the insight.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param insightGuid The unique identifier for the insight. Defined by MX.
 @return ApiListScheduledPaymentsInsightRequest
*/
func (a *InsightsAPIService) ListScheduledPaymentsInsight(ctx context.Context, userGuid string, insightGuid string) ApiListScheduledPaymentsInsightRequest {
	return ApiListScheduledPaymentsInsightRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		insightGuid: insightGuid,
	}
}

// Execute executes the request
//  @return ScheduledPaymentsResponseBody
func (a *InsightsAPIService) ListScheduledPaymentsInsightExecute(r ApiListScheduledPaymentsInsightRequest) (*ScheduledPaymentsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ScheduledPaymentsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ListScheduledPaymentsInsight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights/{insight_guid}/scheduled_payments"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"insight_guid"+"}", url.PathEscape(parameterValueToString(r.insightGuid, "insightGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTransactionsInsightRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	insightGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListTransactionsInsightRequest) Page(page int32) ApiListTransactionsInsightRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTransactionsInsightRequest) RecordsPerPage(recordsPerPage int32) ApiListTransactionsInsightRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListTransactionsInsightRequest) Execute() (*TransactionsResponseBody, *http.Response, error) {
	return r.ApiService.ListTransactionsInsightExecute(r)
}

/*
ListTransactionsInsight List all transactions associated with an insight.

Use this endpoint to list all the transactions associated with the insight.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param insightGuid The unique identifier for the insight. Defined by MX.
 @return ApiListTransactionsInsightRequest
*/
func (a *InsightsAPIService) ListTransactionsInsight(ctx context.Context, userGuid string, insightGuid string) ApiListTransactionsInsightRequest {
	return ApiListTransactionsInsightRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		insightGuid: insightGuid,
	}
}

// Execute executes the request
//  @return TransactionsResponseBody
func (a *InsightsAPIService) ListTransactionsInsightExecute(r ApiListTransactionsInsightRequest) (*TransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ListTransactionsInsight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights/{insight_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"insight_guid"+"}", url.PathEscape(parameterValueToString(r.insightGuid, "insightGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadInsightsUserRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	insightGuid string
}

func (r ApiReadInsightsUserRequest) Execute() (*InsightResponseBody, *http.Response, error) {
	return r.ApiService.ReadInsightsUserExecute(r)
}

/*
ReadInsightsUser Read a specific insight.

Use this endpoint to read the attributes of a specific insight according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param insightGuid The unique identifier for the insight. Defined by MX.
 @return ApiReadInsightsUserRequest
*/
func (a *InsightsAPIService) ReadInsightsUser(ctx context.Context, userGuid string, insightGuid string) ApiReadInsightsUserRequest {
	return ApiReadInsightsUserRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		insightGuid: insightGuid,
	}
}

// Execute executes the request
//  @return InsightResponseBody
func (a *InsightsAPIService) ReadInsightsUserExecute(r ApiReadInsightsUserRequest) (*InsightResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InsightResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.ReadInsightsUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights{insight_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"insight_guid"+"}", url.PathEscape(parameterValueToString(r.insightGuid, "insightGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateInsightRequest struct {
	ctx context.Context
	ApiService *InsightsAPIService
	userGuid string
	insightGuid string
	insightUpdateRequest *InsightUpdateRequest
}

// The insight to be updated (None of these parameters are required, but the user object cannot be empty.)
func (r ApiUpdateInsightRequest) InsightUpdateRequest(insightUpdateRequest InsightUpdateRequest) ApiUpdateInsightRequest {
	r.insightUpdateRequest = &insightUpdateRequest
	return r
}

func (r ApiUpdateInsightRequest) Execute() (*InsightResponse, *http.Response, error) {
	return r.ApiService.UpdateInsightExecute(r)
}

/*
UpdateInsight Update insight

Use this endpoint to update the attributes of a particular insight according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param insightGuid The unique identifier for the insight. Defined by MX.
 @return ApiUpdateInsightRequest
*/
func (a *InsightsAPIService) UpdateInsight(ctx context.Context, userGuid string, insightGuid string) ApiUpdateInsightRequest {
	return ApiUpdateInsightRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		insightGuid: insightGuid,
	}
}

// Execute executes the request
//  @return InsightResponse
func (a *InsightsAPIService) UpdateInsightExecute(r ApiUpdateInsightRequest) (*InsightResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InsightResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InsightsAPIService.UpdateInsight")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/insights{insight_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"insight_guid"+"}", url.PathEscape(parameterValueToString(r.insightGuid, "insightGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.insightUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("insightUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.insightUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
