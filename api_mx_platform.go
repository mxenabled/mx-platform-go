/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
)


// MxPlatformAPIService MxPlatformAPI service
type MxPlatformAPIService service

type ApiAggregateMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiAggregateMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.AggregateMemberExecute(r)
}

/*
AggregateMember Aggregate member

Calling this endpoint initiates an aggregation event for the member. This brings in the latest account and transaction data from the connected institution. If this data has recently been updated, MX may not initiate an aggregation event.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiAggregateMemberRequest
*/
func (a *MxPlatformAPIService) AggregateMember(ctx context.Context, memberGuid string, userGuid string) ApiAggregateMemberRequest {
	return ApiAggregateMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) AggregateMemberExecute(r ApiAggregateMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.AggregateMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/aggregate"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCheckBalancesRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiCheckBalancesRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.CheckBalancesExecute(r)
}

/*
CheckBalances Check balances

This endpoint operates much like the aggregate member endpoint except that it gathers only account balance information; it does not gather any transaction data.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiCheckBalancesRequest
*/
func (a *MxPlatformAPIService) CheckBalances(ctx context.Context, memberGuid string, userGuid string) ApiCheckBalancesRequest {
	return ApiCheckBalancesRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) CheckBalancesExecute(r ApiCheckBalancesRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CheckBalances")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/check_balance"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateCategoryRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	categoryCreateRequestBody *CategoryCreateRequestBody
}

// Custom category object to be created
func (r ApiCreateCategoryRequest) CategoryCreateRequestBody(categoryCreateRequestBody CategoryCreateRequestBody) ApiCreateCategoryRequest {
	r.categoryCreateRequestBody = &categoryCreateRequestBody
	return r
}

func (r ApiCreateCategoryRequest) Execute() (*CategoryResponseBody, *http.Response, error) {
	return r.ApiService.CreateCategoryExecute(r)
}

/*
CreateCategory Create category

Use this endpoint to create a new custom category for a specific `user`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiCreateCategoryRequest
*/
func (a *MxPlatformAPIService) CreateCategory(ctx context.Context, userGuid string) ApiCreateCategoryRequest {
	return ApiCreateCategoryRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return CategoryResponseBody
func (a *MxPlatformAPIService) CreateCategoryExecute(r ApiCreateCategoryRequest) (*CategoryResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateCategory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/categories"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.categoryCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("categoryCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.categoryCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateManagedAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	managedAccountCreateRequestBody *ManagedAccountCreateRequestBody
}

// Managed account to be created.
func (r ApiCreateManagedAccountRequest) ManagedAccountCreateRequestBody(managedAccountCreateRequestBody ManagedAccountCreateRequestBody) ApiCreateManagedAccountRequest {
	r.managedAccountCreateRequestBody = &managedAccountCreateRequestBody
	return r
}

func (r ApiCreateManagedAccountRequest) Execute() (*AccountResponseBody, *http.Response, error) {
	return r.ApiService.CreateManagedAccountExecute(r)
}

/*
CreateManagedAccount Create managed account

Use this endpoint to create a partner-managed account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiCreateManagedAccountRequest
*/
func (a *MxPlatformAPIService) CreateManagedAccount(ctx context.Context, memberGuid string, userGuid string) ApiCreateManagedAccountRequest {
	return ApiCreateManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountResponseBody
func (a *MxPlatformAPIService) CreateManagedAccountExecute(r ApiCreateManagedAccountRequest) (*AccountResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedAccountCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("managedAccountCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managedAccountCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateManagedMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	managedMemberCreateRequestBody *ManagedMemberCreateRequestBody
}

// Managed member to be created.
func (r ApiCreateManagedMemberRequest) ManagedMemberCreateRequestBody(managedMemberCreateRequestBody ManagedMemberCreateRequestBody) ApiCreateManagedMemberRequest {
	r.managedMemberCreateRequestBody = &managedMemberCreateRequestBody
	return r
}

func (r ApiCreateManagedMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.CreateManagedMemberExecute(r)
}

/*
CreateManagedMember Create managed member

Use this endpoint to create a new partner-managed `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiCreateManagedMemberRequest
*/
func (a *MxPlatformAPIService) CreateManagedMember(ctx context.Context, userGuid string) ApiCreateManagedMemberRequest {
	return ApiCreateManagedMemberRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) CreateManagedMemberExecute(r ApiCreateManagedMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateManagedMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedMemberCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("managedMemberCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managedMemberCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateManagedTransactionRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	userGuid string
	managedTransactionCreateRequestBody *ManagedTransactionCreateRequestBody
}

// Managed transaction to be created.
func (r ApiCreateManagedTransactionRequest) ManagedTransactionCreateRequestBody(managedTransactionCreateRequestBody ManagedTransactionCreateRequestBody) ApiCreateManagedTransactionRequest {
	r.managedTransactionCreateRequestBody = &managedTransactionCreateRequestBody
	return r
}

func (r ApiCreateManagedTransactionRequest) Execute() (*TransactionResponseBody, *http.Response, error) {
	return r.ApiService.CreateManagedTransactionExecute(r)
}

/*
CreateManagedTransaction Create managed transaction

Use this endpoint to create a new partner-managed `transaction`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiCreateManagedTransactionRequest
*/
func (a *MxPlatformAPIService) CreateManagedTransaction(ctx context.Context, accountGuid string, memberGuid string, userGuid string) ApiCreateManagedTransactionRequest {
	return ApiCreateManagedTransactionRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionResponseBody
func (a *MxPlatformAPIService) CreateManagedTransactionExecute(r ApiCreateManagedTransactionRequest) (*TransactionResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateManagedTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedTransactionCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("managedTransactionCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managedTransactionCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateManualAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	accountCreateRequestBody *AccountCreateRequestBody
}

// Manual account object to be created.
func (r ApiCreateManualAccountRequest) AccountCreateRequestBody(accountCreateRequestBody AccountCreateRequestBody) ApiCreateManualAccountRequest {
	r.accountCreateRequestBody = &accountCreateRequestBody
	return r
}

func (r ApiCreateManualAccountRequest) Execute() (*AccountResponseBody, *http.Response, error) {
	return r.ApiService.CreateManualAccountExecute(r)
}

/*
CreateManualAccount Create manual account

This endpoint can only be used to create manual accounts. Creating a manual account will automatically create it under the Manual Institution member. Since a manual account has no credentials tied to the member, the account will never aggregate or include data from a data feed.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiCreateManualAccountRequest
*/
func (a *MxPlatformAPIService) CreateManualAccount(ctx context.Context, userGuid string) ApiCreateManualAccountRequest {
	return ApiCreateManualAccountRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountResponseBody
func (a *MxPlatformAPIService) CreateManualAccountExecute(r ApiCreateManualAccountRequest) (*AccountResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateManualAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("accountCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	memberCreateRequestBody *MemberCreateRequestBody
}

// Member object to be created with optional parameters (id and metadata) and required parameters (credentials and institution_code)
func (r ApiCreateMemberRequest) MemberCreateRequestBody(memberCreateRequestBody MemberCreateRequestBody) ApiCreateMemberRequest {
	r.memberCreateRequestBody = &memberCreateRequestBody
	return r
}

func (r ApiCreateMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.CreateMemberExecute(r)
}

/*
CreateMember Create member

This endpoint allows you to create a new member. Members are created with the required parameters credentials and institution_code, and the optional parameters id and metadata. When creating a member, youll need to include the correct type of credential required by the financial institution and provided by the user. You can find out which credential type is required with the `/institutions/{institution_code}/credentials` endpoint. If successful, the MX Platform API will respond with the newly-created member object. Once you successfully create a member, MX will immediately validate the provided credentials and attempt to aggregate data for accounts and transactions.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiCreateMemberRequest
*/
func (a *MxPlatformAPIService) CreateMember(ctx context.Context, userGuid string) ApiCreateMemberRequest {
	return ApiCreateMemberRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) CreateMemberExecute(r ApiCreateMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("memberCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.memberCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTagRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	tagCreateRequestBody *TagCreateRequestBody
}

// Tag object to be created with required parameters (tag_guid)
func (r ApiCreateTagRequest) TagCreateRequestBody(tagCreateRequestBody TagCreateRequestBody) ApiCreateTagRequest {
	r.tagCreateRequestBody = &tagCreateRequestBody
	return r
}

func (r ApiCreateTagRequest) Execute() (*TagResponseBody, *http.Response, error) {
	return r.ApiService.CreateTagExecute(r)
}

/*
CreateTag Create tag

Use this endpoint to create a new custom tag.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiCreateTagRequest
*/
func (a *MxPlatformAPIService) CreateTag(ctx context.Context, userGuid string) ApiCreateTagRequest {
	return ApiCreateTagRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TagResponseBody
func (a *MxPlatformAPIService) CreateTagExecute(r ApiCreateTagRequest) (*TagResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TagResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("tagCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTaggingRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	taggingCreateRequestBody *TaggingCreateRequestBody
}

// Tagging object to be created with required parameters (tag_guid and transaction_guid)
func (r ApiCreateTaggingRequest) TaggingCreateRequestBody(taggingCreateRequestBody TaggingCreateRequestBody) ApiCreateTaggingRequest {
	r.taggingCreateRequestBody = &taggingCreateRequestBody
	return r
}

func (r ApiCreateTaggingRequest) Execute() (*TaggingResponseBody, *http.Response, error) {
	return r.ApiService.CreateTaggingExecute(r)
}

/*
CreateTagging Create tagging

Use this endpoint to create a new association between a tag and a particular transaction, according to their unique GUIDs.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiCreateTaggingRequest
*/
func (a *MxPlatformAPIService) CreateTagging(ctx context.Context, userGuid string) ApiCreateTaggingRequest {
	return ApiCreateTaggingRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TaggingResponseBody
func (a *MxPlatformAPIService) CreateTaggingExecute(r ApiCreateTaggingRequest) (*TaggingResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaggingResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateTagging")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/taggings"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taggingCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("taggingCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taggingCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateTransactionRuleRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	transactionRuleCreateRequestBody *TransactionRuleCreateRequestBody
}

// TransactionRule object to be created with optional parameters (description) and required parameters (category_guid and match_description)
func (r ApiCreateTransactionRuleRequest) TransactionRuleCreateRequestBody(transactionRuleCreateRequestBody TransactionRuleCreateRequestBody) ApiCreateTransactionRuleRequest {
	r.transactionRuleCreateRequestBody = &transactionRuleCreateRequestBody
	return r
}

func (r ApiCreateTransactionRuleRequest) Execute() (*TransactionRuleResponseBody, *http.Response, error) {
	return r.ApiService.CreateTransactionRuleExecute(r)
}

/*
CreateTransactionRule Create transaction rule

Use this endpoint to create a new transaction rule. The newly-created `transaction_rule` object will be returned if successful.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiCreateTransactionRuleRequest
*/
func (a *MxPlatformAPIService) CreateTransactionRule(ctx context.Context, userGuid string) ApiCreateTransactionRuleRequest {
	return ApiCreateTransactionRuleRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionRuleResponseBody
func (a *MxPlatformAPIService) CreateTransactionRuleExecute(r ApiCreateTransactionRuleRequest) (*TransactionRuleResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionRuleResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateTransactionRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transaction_rules"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transactionRuleCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("transactionRuleCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transactionRuleCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateUserRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userCreateRequestBody *UserCreateRequestBody
}

// User object to be created. (None of these parameters are required, but the user object cannot be empty)
func (r ApiCreateUserRequest) UserCreateRequestBody(userCreateRequestBody UserCreateRequestBody) ApiCreateUserRequest {
	r.userCreateRequestBody = &userCreateRequestBody
	return r
}

func (r ApiCreateUserRequest) Execute() (*UserResponseBody, *http.Response, error) {
	return r.ApiService.CreateUserExecute(r)
}

/*
CreateUser Create user

Use this endpoint to create a new user. The API will respond with the newly-created user object if successful. Disabling a user means that accounts and transactions associated with it will not be updated in the background by MX. It will also restrict access to that user’s data until they are no longer disabled.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateUserRequest
*/
func (a *MxPlatformAPIService) CreateUser(ctx context.Context) ApiCreateUserRequest {
	return ApiCreateUserRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UserResponseBody
func (a *MxPlatformAPIService) CreateUserExecute(r ApiCreateUserRequest) (*UserResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreateUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("userCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreditCardRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	creditCardProductGuid string
}

func (r ApiCreditCardRequest) Execute() (*CreditCardProductResponse, *http.Response, error) {
	return r.ApiService.CreditCardExecute(r)
}

/*
CreditCard Read a Credit Card Product

This endpoint returns the specified `credit_card_product` according to the unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param creditCardProductGuid The required `credit_card_product_guid` can be found on the `account` object.
 @return ApiCreditCardRequest
*/
func (a *MxPlatformAPIService) CreditCard(ctx context.Context, creditCardProductGuid string) ApiCreditCardRequest {
	return ApiCreditCardRequest{
		ApiService: a,
		ctx: ctx,
		creditCardProductGuid: creditCardProductGuid,
	}
}

// Execute executes the request
//  @return CreditCardProductResponse
func (a *MxPlatformAPIService) CreditCardExecute(r ApiCreditCardRequest) (*CreditCardProductResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreditCardProductResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.CreditCard")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/credit_card_products/{credit_card_product_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"credit_card_product_guid"+"}", url.PathEscape(parameterValueToString(r.creditCardProductGuid, "creditCardProductGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteCategoryRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	categoryGuid string
	userGuid string
}

func (r ApiDeleteCategoryRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCategoryExecute(r)
}

/*
DeleteCategory Delete category

Use this endpoint to delete a specific custom category according to its unique GUID. The API will respond with an empty object and a status of `204 No Content`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param categoryGuid The unique id for a `category`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteCategoryRequest
*/
func (a *MxPlatformAPIService) DeleteCategory(ctx context.Context, categoryGuid string, userGuid string) ApiDeleteCategoryRequest {
	return ApiDeleteCategoryRequest{
		ApiService: a,
		ctx: ctx,
		categoryGuid: categoryGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteCategoryExecute(r ApiDeleteCategoryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteCategory")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/categories/{category_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"category_guid"+"}", url.PathEscape(parameterValueToString(r.categoryGuid, "categoryGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteManagedAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	userGuid string
}

func (r ApiDeleteManagedAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManagedAccountExecute(r)
}

/*
DeleteManagedAccount Delete managed account

Use this endpoint to delete a partner-managed account according to its unique GUID. If successful, the API will respond with a status of `204 No Content`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteManagedAccountRequest
*/
func (a *MxPlatformAPIService) DeleteManagedAccount(ctx context.Context, accountGuid string, memberGuid string, userGuid string) ApiDeleteManagedAccountRequest {
	return ApiDeleteManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteManagedAccountExecute(r ApiDeleteManagedAccountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteManagedAccount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteManagedMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiDeleteManagedMemberRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManagedMemberExecute(r)
}

/*
DeleteManagedMember Delete managed member

Use this endpoint to delete the specified partner-managed `member`. The endpoint will respond with a status of `204 No Content` without a resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteManagedMemberRequest
*/
func (a *MxPlatformAPIService) DeleteManagedMember(ctx context.Context, memberGuid string, userGuid string) ApiDeleteManagedMemberRequest {
	return ApiDeleteManagedMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteManagedMemberExecute(r ApiDeleteManagedMemberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteManagedMember")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteManagedTransactionRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	transactionGuid string
	userGuid string
}

func (r ApiDeleteManagedTransactionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManagedTransactionExecute(r)
}

/*
DeleteManagedTransaction Delete managed transaction

Use this endpoint to delete the specified partner-managed `transaction`. The endpoint will respond with a status of `204 No Content` without a resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param transactionGuid The unique id for a `transaction`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteManagedTransactionRequest
*/
func (a *MxPlatformAPIService) DeleteManagedTransaction(ctx context.Context, accountGuid string, memberGuid string, transactionGuid string, userGuid string) ApiDeleteManagedTransactionRequest {
	return ApiDeleteManagedTransactionRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		transactionGuid: transactionGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteManagedTransactionExecute(r ApiDeleteManagedTransactionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteManagedTransaction")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_guid"+"}", url.PathEscape(parameterValueToString(r.transactionGuid, "transactionGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteManualAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	userGuid string
}

func (r ApiDeleteManualAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteManualAccountExecute(r)
}

/*
DeleteManualAccount Delete manual account

This endpoint deletes accounts that were manually created. The API will respond with an empty object and a status of `204 No Content`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteManualAccountRequest
*/
func (a *MxPlatformAPIService) DeleteManualAccount(ctx context.Context, accountGuid string, userGuid string) ApiDeleteManualAccountRequest {
	return ApiDeleteManualAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteManualAccountExecute(r ApiDeleteManualAccountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteManualAccount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts/{account_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiDeleteMemberRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMemberExecute(r)
}

/*
DeleteMember Delete member

Accessing this endpoint will permanently delete a member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteMemberRequest
*/
func (a *MxPlatformAPIService) DeleteMember(ctx context.Context, memberGuid string, userGuid string) ApiDeleteMemberRequest {
	return ApiDeleteMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteMemberExecute(r ApiDeleteMemberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteMember")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteTagRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	tagGuid string
	userGuid string
}

func (r ApiDeleteTagRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTagExecute(r)
}

/*
DeleteTag Delete tag

Use this endpoint to permanently delete a specific tag based on its unique GUID. If successful, the API will respond with status of `204 No Content`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tagGuid The unique id for a `tag`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteTagRequest
*/
func (a *MxPlatformAPIService) DeleteTag(ctx context.Context, tagGuid string, userGuid string) ApiDeleteTagRequest {
	return ApiDeleteTagRequest{
		ApiService: a,
		ctx: ctx,
		tagGuid: tagGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteTagExecute(r ApiDeleteTagRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteTag")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/tags/{tag_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"tag_guid"+"}", url.PathEscape(parameterValueToString(r.tagGuid, "tagGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteTaggingRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	taggingGuid string
	userGuid string
}

func (r ApiDeleteTaggingRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTaggingExecute(r)
}

/*
DeleteTagging Delete tagging

Use this endpoint to delete a tagging according to its unique GUID. If successful, the API will respond with an empty body and a status of 204 NO Content.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taggingGuid The unique id for a `tagging`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteTaggingRequest
*/
func (a *MxPlatformAPIService) DeleteTagging(ctx context.Context, taggingGuid string, userGuid string) ApiDeleteTaggingRequest {
	return ApiDeleteTaggingRequest{
		ApiService: a,
		ctx: ctx,
		taggingGuid: taggingGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteTaggingExecute(r ApiDeleteTaggingRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteTagging")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/taggings/{tagging_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"tagging_guid"+"}", url.PathEscape(parameterValueToString(r.taggingGuid, "taggingGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteTransactionRuleRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	transactionRuleGuid string
	userGuid string
}

func (r ApiDeleteTransactionRuleRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTransactionRuleExecute(r)
}

/*
DeleteTransactionRule Delete transaction rule

Use this endpoint to permanently delete a transaction rule based on its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transactionRuleGuid The unique id for a `transaction_rule`.
 @param userGuid The unique id for a `user`.
 @return ApiDeleteTransactionRuleRequest
*/
func (a *MxPlatformAPIService) DeleteTransactionRule(ctx context.Context, transactionRuleGuid string, userGuid string) ApiDeleteTransactionRuleRequest {
	return ApiDeleteTransactionRuleRequest{
		ApiService: a,
		ctx: ctx,
		transactionRuleGuid: transactionRuleGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteTransactionRuleExecute(r ApiDeleteTransactionRuleRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteTransactionRule")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transaction_rules/{transaction_rule_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_rule_guid"+"}", url.PathEscape(parameterValueToString(r.transactionRuleGuid, "transactionRuleGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteUserRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
}

func (r ApiDeleteUserRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteUserExecute(r)
}

/*
DeleteUser Delete user

Use this endpoint to delete the specified `user`. The response will have a status of `204 No Content` without an object.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiDeleteUserRequest
*/
func (a *MxPlatformAPIService) DeleteUser(ctx context.Context, userGuid string) ApiDeleteUserRequest {
	return ApiDeleteUserRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) DeleteUserExecute(r ApiDeleteUserRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeleteUser")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	paymentProcessorAuthorizationCodeRequestBody *PaymentProcessorAuthorizationCodeRequestBody
}

// The scope for the authorization code.
func (r ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest) PaymentProcessorAuthorizationCodeRequestBody(paymentProcessorAuthorizationCodeRequestBody PaymentProcessorAuthorizationCodeRequestBody) ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest {
	r.paymentProcessorAuthorizationCodeRequestBody = &paymentProcessorAuthorizationCodeRequestBody
	return r
}

func (r ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest) Execute() (*PaymentProcessorAuthorizationCodeResponseBody, *http.Response, error) {
	return r.ApiService.DeprecatedRequestPaymentProcessorAuthorizationCodeExecute(r)
}

/*
DeprecatedRequestPaymentProcessorAuthorizationCode (Deprecated) Request an authorization code.

(This endpoint is deprecated. Clients should use `/authorization_code`.) Clients use this endpoint to request an authorization_code according to a user, member, and account specified in the request body. Clients then pass this code to processors. Processor access is scoped only to the user/member/account specified in this request. Before requesting an authorization_code, clients must have verified the specified member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest
*/
func (a *MxPlatformAPIService) DeprecatedRequestPaymentProcessorAuthorizationCode(ctx context.Context) ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest {
	return ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaymentProcessorAuthorizationCodeResponseBody
func (a *MxPlatformAPIService) DeprecatedRequestPaymentProcessorAuthorizationCodeExecute(r ApiDeprecatedRequestPaymentProcessorAuthorizationCodeRequest) (*PaymentProcessorAuthorizationCodeResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaymentProcessorAuthorizationCodeResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DeprecatedRequestPaymentProcessorAuthorizationCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/payment_processor_authorization_code"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.paymentProcessorAuthorizationCodeRequestBody == nil {
		return localVarReturnValue, nil, reportError("paymentProcessorAuthorizationCodeRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.paymentProcessorAuthorizationCodeRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDownloadStatementPDFRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	statementGuid string
	userGuid string
}

func (r ApiDownloadStatementPDFRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.DownloadStatementPDFExecute(r)
}

/*
DownloadStatementPDF Download statement pdf

Use this endpoint to download a specified statement PDF.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param statementGuid The unique id for a `statement`.
 @param userGuid The unique id for a `user`.
 @return ApiDownloadStatementPDFRequest
*/
func (a *MxPlatformAPIService) DownloadStatementPDF(ctx context.Context, memberGuid string, statementGuid string, userGuid string) ApiDownloadStatementPDFRequest {
	return ApiDownloadStatementPDFRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		statementGuid: statementGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MxPlatformAPIService) DownloadStatementPDFExecute(r ApiDownloadStatementPDFRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DownloadStatementPDF")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/statements/{statement_guid}.pdf"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"statement_guid"+"}", url.PathEscape(parameterValueToString(r.statementGuid, "statementGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+pdf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDownloadTaxDocumentRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	taxDocumentGuid string
	memberGuid string
	userGuid string
}

func (r ApiDownloadTaxDocumentRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.DownloadTaxDocumentExecute(r)
}

/*
DownloadTaxDocument Download a Tax Document PDF

Use this endpoint to download a PDF version of the specified tax document. The endpoint URL is the base URL appended with the uri of the tax_document.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxDocumentGuid The unique id for a `tax_document`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiDownloadTaxDocumentRequest
*/
func (a *MxPlatformAPIService) DownloadTaxDocument(ctx context.Context, taxDocumentGuid string, memberGuid string, userGuid string) ApiDownloadTaxDocumentRequest {
	return ApiDownloadTaxDocumentRequest{
		ApiService: a,
		ctx: ctx,
		taxDocumentGuid: taxDocumentGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MxPlatformAPIService) DownloadTaxDocumentExecute(r ApiDownloadTaxDocumentRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.DownloadTaxDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}.pdf"
	localVarPath = strings.Replace(localVarPath, "{"+"tax_document_guid"+"}", url.PathEscape(parameterValueToString(r.taxDocumentGuid, "taxDocumentGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+pdf"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEnhanceTransactionsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	enhanceTransactionsRequestBody *EnhanceTransactionsRequestBody
}

// Transaction object to be enhanced
func (r ApiEnhanceTransactionsRequest) EnhanceTransactionsRequestBody(enhanceTransactionsRequestBody EnhanceTransactionsRequestBody) ApiEnhanceTransactionsRequest {
	r.enhanceTransactionsRequestBody = &enhanceTransactionsRequestBody
	return r
}

func (r ApiEnhanceTransactionsRequest) Execute() (*EnhanceTransactionsResponseBody, *http.Response, error) {
	return r.ApiService.EnhanceTransactionsExecute(r)
}

/*
EnhanceTransactions Enhance transactions

Use this endpoint to categorize, cleanse, and classify transactions. These transactions are not persisted or stored on the MX platform.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEnhanceTransactionsRequest
*/
func (a *MxPlatformAPIService) EnhanceTransactions(ctx context.Context) ApiEnhanceTransactionsRequest {
	return ApiEnhanceTransactionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return EnhanceTransactionsResponseBody
func (a *MxPlatformAPIService) EnhanceTransactionsExecute(r ApiEnhanceTransactionsRequest) (*EnhanceTransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EnhanceTransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.EnhanceTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/transactions/enhance"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.enhanceTransactionsRequestBody == nil {
		return localVarReturnValue, nil, reportError("enhanceTransactionsRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.enhanceTransactionsRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiExtendHistoryRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiExtendHistoryRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.ExtendHistoryExecute(r)
}

/*
ExtendHistory Extend history

Some institutions allow developers to access an extended transaction history with up to 24 months of data associated with a particular member. The process for fetching and then reading this extended transaction history is much like standard aggregation, and it may trigger multi-factor authentication.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique identifier for a `member`.
 @param userGuid The unique identifier for a `user`.
 @return ApiExtendHistoryRequest
*/
func (a *MxPlatformAPIService) ExtendHistory(ctx context.Context, memberGuid string, userGuid string) ApiExtendHistoryRequest {
	return ApiExtendHistoryRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) ExtendHistoryExecute(r ApiExtendHistoryRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ExtendHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/extend_history"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchRewardsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	memberGuid string
}

func (r ApiFetchRewardsRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.FetchRewardsExecute(r)
}

/*
FetchRewards Fetch Rewards

Calling this endpoint initiates an aggregation-type event which will gather the member's rewards information, as well as account and transaction information. Rewards data is also gathered with daily background aggregations.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @param memberGuid The unique identifier for the member. Defined by MX.
 @return ApiFetchRewardsRequest
*/
func (a *MxPlatformAPIService) FetchRewards(ctx context.Context, userGuid string, memberGuid string) ApiFetchRewardsRequest {
	return ApiFetchRewardsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		memberGuid: memberGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) FetchRewardsExecute(r ApiFetchRewardsRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.FetchRewards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/fetch_rewards"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchStatementsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiFetchStatementsRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.FetchStatementsExecute(r)
}

/*
FetchStatements Fetch statements

Use this endpoint to fetch the statements associated with a particular member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiFetchStatementsRequest
*/
func (a *MxPlatformAPIService) FetchStatements(ctx context.Context, memberGuid string, userGuid string) ApiFetchStatementsRequest {
	return ApiFetchStatementsRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) FetchStatementsExecute(r ApiFetchStatementsRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.FetchStatements")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/fetch_statements"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchTaxDocumentsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiFetchTaxDocumentsRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.FetchTaxDocumentsExecute(r)
}

/*
FetchTaxDocuments Fetch Tax Documents

Use this endpoint to fetch (aggregate) the tax documents associated with the specified member. This request **does not** return the latest tax documents. It just starts the document aggregation process and returns the initial state of the process. You must interact with the newly aggregated data using the other document endpoints in this reference. This request may also trigger multi-factor authentication which requires end-user input and a specific process for answering authentication challenges.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiFetchTaxDocumentsRequest
*/
func (a *MxPlatformAPIService) FetchTaxDocuments(ctx context.Context, memberGuid string, userGuid string) ApiFetchTaxDocumentsRequest {
	return ApiFetchTaxDocumentsRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) FetchTaxDocumentsExecute(r ApiFetchTaxDocumentsRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.FetchTaxDocuments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/fetch_tax_documents"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentifyMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiIdentifyMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.IdentifyMemberExecute(r)
}

/*
IdentifyMember Identify member

The identify endpoint begins an identification process for an already-existing member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiIdentifyMemberRequest
*/
func (a *MxPlatformAPIService) IdentifyMember(ctx context.Context, memberGuid string, userGuid string) ApiIdentifyMemberRequest {
	return ApiIdentifyMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) IdentifyMemberExecute(r ApiIdentifyMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.IdentifyMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/identify"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccountNumbersByAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListAccountNumbersByAccountRequest) Page(page int32) ApiListAccountNumbersByAccountRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListAccountNumbersByAccountRequest) RecordsPerPage(recordsPerPage int32) ApiListAccountNumbersByAccountRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListAccountNumbersByAccountRequest) Execute() (*AccountNumbersResponseBody, *http.Response, error) {
	return r.ApiService.ListAccountNumbersByAccountExecute(r)
}

/*
ListAccountNumbersByAccount List account numbers by account

This endpoint returns a list of account numbers associated with the specified `account`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param userGuid The unique id for a `user`.
 @return ApiListAccountNumbersByAccountRequest
*/
func (a *MxPlatformAPIService) ListAccountNumbersByAccount(ctx context.Context, accountGuid string, userGuid string) ApiListAccountNumbersByAccountRequest {
	return ApiListAccountNumbersByAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountNumbersResponseBody
func (a *MxPlatformAPIService) ListAccountNumbersByAccountExecute(r ApiListAccountNumbersByAccountRequest) (*AccountNumbersResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountNumbersResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListAccountNumbersByAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts/{account_guid}/account_numbers"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccountNumbersByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListAccountNumbersByMemberRequest) Page(page int32) ApiListAccountNumbersByMemberRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListAccountNumbersByMemberRequest) RecordsPerPage(recordsPerPage int32) ApiListAccountNumbersByMemberRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListAccountNumbersByMemberRequest) Execute() (*AccountNumbersResponseBody, *http.Response, error) {
	return r.ApiService.ListAccountNumbersByMemberExecute(r)
}

/*
ListAccountNumbersByMember List account numbers by member

This endpoint returns a list of account numbers associated with the specified `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListAccountNumbersByMemberRequest
*/
func (a *MxPlatformAPIService) ListAccountNumbersByMember(ctx context.Context, memberGuid string, userGuid string) ApiListAccountNumbersByMemberRequest {
	return ApiListAccountNumbersByMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountNumbersResponseBody
func (a *MxPlatformAPIService) ListAccountNumbersByMemberExecute(r ApiListAccountNumbersByMemberRequest) (*AccountNumbersResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountNumbersResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListAccountNumbersByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/account_numbers"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccountOwnersByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListAccountOwnersByMemberRequest) Page(page int32) ApiListAccountOwnersByMemberRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListAccountOwnersByMemberRequest) RecordsPerPage(recordsPerPage int32) ApiListAccountOwnersByMemberRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListAccountOwnersByMemberRequest) Execute() (*AccountOwnersResponseBody, *http.Response, error) {
	return r.ApiService.ListAccountOwnersByMemberExecute(r)
}

/*
ListAccountOwnersByMember List account owners by member

This endpoint returns an array with information about every account associated with a particular member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListAccountOwnersByMemberRequest
*/
func (a *MxPlatformAPIService) ListAccountOwnersByMember(ctx context.Context, memberGuid string, userGuid string) ApiListAccountOwnersByMemberRequest {
	return ApiListAccountOwnersByMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountOwnersResponseBody
func (a *MxPlatformAPIService) ListAccountOwnersByMemberExecute(r ApiListAccountOwnersByMemberRequest) (*AccountOwnersResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountOwnersResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListAccountOwnersByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/account_owners"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCategoriesRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListCategoriesRequest) Page(page int32) ApiListCategoriesRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListCategoriesRequest) RecordsPerPage(recordsPerPage int32) ApiListCategoriesRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListCategoriesRequest) Execute() (*CategoriesResponseBody, *http.Response, error) {
	return r.ApiService.ListCategoriesExecute(r)
}

/*
ListCategories List categories

Use this endpoint to list all categories associated with a `user`, including both default and custom categories.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListCategoriesRequest
*/
func (a *MxPlatformAPIService) ListCategories(ctx context.Context, userGuid string) ApiListCategoriesRequest {
	return ApiListCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return CategoriesResponseBody
func (a *MxPlatformAPIService) ListCategoriesExecute(r ApiListCategoriesRequest) (*CategoriesResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoriesResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/categories"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDefaultCategoriesRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListDefaultCategoriesRequest) Page(page int32) ApiListDefaultCategoriesRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListDefaultCategoriesRequest) RecordsPerPage(recordsPerPage int32) ApiListDefaultCategoriesRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListDefaultCategoriesRequest) Execute() (*CategoriesResponseBody, *http.Response, error) {
	return r.ApiService.ListDefaultCategoriesExecute(r)
}

/*
ListDefaultCategories List default categories

Use this endpoint to retrieve a list of all the default categories and subcategories offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListDefaultCategoriesRequest
*/
func (a *MxPlatformAPIService) ListDefaultCategories(ctx context.Context) ApiListDefaultCategoriesRequest {
	return ApiListDefaultCategoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CategoriesResponseBody
func (a *MxPlatformAPIService) ListDefaultCategoriesExecute(r ApiListDefaultCategoriesRequest) (*CategoriesResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoriesResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListDefaultCategories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/categories/default"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDefaultCategoriesByUserRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListDefaultCategoriesByUserRequest) Page(page int32) ApiListDefaultCategoriesByUserRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListDefaultCategoriesByUserRequest) RecordsPerPage(recordsPerPage int32) ApiListDefaultCategoriesByUserRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListDefaultCategoriesByUserRequest) Execute() (*CategoriesResponseBody, *http.Response, error) {
	return r.ApiService.ListDefaultCategoriesByUserExecute(r)
}

/*
ListDefaultCategoriesByUser List default categories by user

Use this endpoint to retrieve a list of all the default categories and subcategories, scoped by user, offered within the MX Platform API. In other words, each item in the returned list will have its `is_default` field set to `true`. There are currently 119 default categories and subcategories. Both the _list default categories_ and _list default categories by user_ endpoints return the same results. The different routes are provided for convenience.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListDefaultCategoriesByUserRequest
*/
func (a *MxPlatformAPIService) ListDefaultCategoriesByUser(ctx context.Context, userGuid string) ApiListDefaultCategoriesByUserRequest {
	return ApiListDefaultCategoriesByUserRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return CategoriesResponseBody
func (a *MxPlatformAPIService) ListDefaultCategoriesByUserExecute(r ApiListDefaultCategoriesByUserRequest) (*CategoriesResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoriesResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListDefaultCategoriesByUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/categories/default"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListFavoriteInstitutionsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListFavoriteInstitutionsRequest) Page(page int32) ApiListFavoriteInstitutionsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListFavoriteInstitutionsRequest) RecordsPerPage(recordsPerPage int32) ApiListFavoriteInstitutionsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListFavoriteInstitutionsRequest) Execute() (*InstitutionsResponseBody, *http.Response, error) {
	return r.ApiService.ListFavoriteInstitutionsExecute(r)
}

/*
ListFavoriteInstitutions List favorite institutions

This endpoint returns a paginated list containing institutions that have been set as the partner’s favorites, sorted by popularity. Please contact MX to set a list of favorites.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListFavoriteInstitutionsRequest
*/
func (a *MxPlatformAPIService) ListFavoriteInstitutions(ctx context.Context) ApiListFavoriteInstitutionsRequest {
	return ApiListFavoriteInstitutionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InstitutionsResponseBody
func (a *MxPlatformAPIService) ListFavoriteInstitutionsExecute(r ApiListFavoriteInstitutionsRequest) (*InstitutionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InstitutionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListFavoriteInstitutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/institutions/favorites"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListHoldingsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	fromDate *string
	page *int32
	recordsPerPage *int32
	toDate *string
}

// Filter holdings from this date.
func (r ApiListHoldingsRequest) FromDate(fromDate string) ApiListHoldingsRequest {
	r.fromDate = &fromDate
	return r
}

// Specify current page.
func (r ApiListHoldingsRequest) Page(page int32) ApiListHoldingsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListHoldingsRequest) RecordsPerPage(recordsPerPage int32) ApiListHoldingsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter holdings to this date.
func (r ApiListHoldingsRequest) ToDate(toDate string) ApiListHoldingsRequest {
	r.toDate = &toDate
	return r
}

func (r ApiListHoldingsRequest) Execute() (*HoldingsResponseBody, *http.Response, error) {
	return r.ApiService.ListHoldingsExecute(r)
}

/*
ListHoldings List holdings

This endpoint returns all holdings associated with the specified `user` across all accounts and members.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListHoldingsRequest
*/
func (a *MxPlatformAPIService) ListHoldings(ctx context.Context, userGuid string) ApiListHoldingsRequest {
	return ApiListHoldingsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return HoldingsResponseBody
func (a *MxPlatformAPIService) ListHoldingsExecute(r ApiListHoldingsRequest) (*HoldingsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HoldingsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListHoldings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/holdings"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListHoldingsByAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	userGuid string
	fromDate *string
	page *int32
	recordsPerPage *int32
	toDate *string
}

// Filter holdings from this date.
func (r ApiListHoldingsByAccountRequest) FromDate(fromDate string) ApiListHoldingsByAccountRequest {
	r.fromDate = &fromDate
	return r
}

// Specify current page.
func (r ApiListHoldingsByAccountRequest) Page(page int32) ApiListHoldingsByAccountRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListHoldingsByAccountRequest) RecordsPerPage(recordsPerPage int32) ApiListHoldingsByAccountRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter holdings to this date.
func (r ApiListHoldingsByAccountRequest) ToDate(toDate string) ApiListHoldingsByAccountRequest {
	r.toDate = &toDate
	return r
}

func (r ApiListHoldingsByAccountRequest) Execute() (*HoldingsResponseBody, *http.Response, error) {
	return r.ApiService.ListHoldingsByAccountExecute(r)
}

/*
ListHoldingsByAccount List holdings by account

This endpoint returns all holdings associated with the specified `account`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for the `account`.
 @param userGuid The unique id for the `user`.
 @return ApiListHoldingsByAccountRequest
*/
func (a *MxPlatformAPIService) ListHoldingsByAccount(ctx context.Context, accountGuid string, userGuid string) ApiListHoldingsByAccountRequest {
	return ApiListHoldingsByAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return HoldingsResponseBody
func (a *MxPlatformAPIService) ListHoldingsByAccountExecute(r ApiListHoldingsByAccountRequest) (*HoldingsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HoldingsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListHoldingsByAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts/{account_guid}/holdings"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListHoldingsByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	fromDate *string
	page *int32
	recordsPerPage *int32
	toDate *string
}

// Filter holdings from this date.
func (r ApiListHoldingsByMemberRequest) FromDate(fromDate string) ApiListHoldingsByMemberRequest {
	r.fromDate = &fromDate
	return r
}

// Specify current page.
func (r ApiListHoldingsByMemberRequest) Page(page int32) ApiListHoldingsByMemberRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListHoldingsByMemberRequest) RecordsPerPage(recordsPerPage int32) ApiListHoldingsByMemberRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter holdings to this date.
func (r ApiListHoldingsByMemberRequest) ToDate(toDate string) ApiListHoldingsByMemberRequest {
	r.toDate = &toDate
	return r
}

func (r ApiListHoldingsByMemberRequest) Execute() (*HoldingsResponseBody, *http.Response, error) {
	return r.ApiService.ListHoldingsByMemberExecute(r)
}

/*
ListHoldingsByMember List holdings by member

This endpoint returns all holdings associated with the specified `member` across all accounts.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListHoldingsByMemberRequest
*/
func (a *MxPlatformAPIService) ListHoldingsByMember(ctx context.Context, memberGuid string, userGuid string) ApiListHoldingsByMemberRequest {
	return ApiListHoldingsByMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return HoldingsResponseBody
func (a *MxPlatformAPIService) ListHoldingsByMemberExecute(r ApiListHoldingsByMemberRequest) (*HoldingsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HoldingsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListHoldingsByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/holdings"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInstitutionCredentialsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	institutionCode string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListInstitutionCredentialsRequest) Page(page int32) ApiListInstitutionCredentialsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListInstitutionCredentialsRequest) RecordsPerPage(recordsPerPage int32) ApiListInstitutionCredentialsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListInstitutionCredentialsRequest) Execute() (*CredentialsResponseBody, *http.Response, error) {
	return r.ApiService.ListInstitutionCredentialsExecute(r)
}

/*
ListInstitutionCredentials List institution credentials

Use this endpoint to see which credentials will be needed to create a member for a specific institution.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param institutionCode The institution_code of the institution.
 @return ApiListInstitutionCredentialsRequest
*/
func (a *MxPlatformAPIService) ListInstitutionCredentials(ctx context.Context, institutionCode string) ApiListInstitutionCredentialsRequest {
	return ApiListInstitutionCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		institutionCode: institutionCode,
	}
}

// Execute executes the request
//  @return CredentialsResponseBody
func (a *MxPlatformAPIService) ListInstitutionCredentialsExecute(r ApiListInstitutionCredentialsRequest) (*CredentialsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CredentialsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListInstitutionCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/institutions/{institution_code}/credentials"
	localVarPath = strings.Replace(localVarPath, "{"+"institution_code"+"}", url.PathEscape(parameterValueToString(r.institutionCode, "institutionCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListInstitutionsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	name *string
	page *int32
	recordsPerPage *int32
	supportsAccountIdentification *bool
	supportsAccountStatement *bool
	supportsAccountVerification *bool
	supportsTransactionHistory *bool
}

// This will list only institutions in which the appended string appears.
func (r ApiListInstitutionsRequest) Name(name string) ApiListInstitutionsRequest {
	r.name = &name
	return r
}

// Specify current page.
func (r ApiListInstitutionsRequest) Page(page int32) ApiListInstitutionsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListInstitutionsRequest) RecordsPerPage(recordsPerPage int32) ApiListInstitutionsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter only institutions which support account identification.
func (r ApiListInstitutionsRequest) SupportsAccountIdentification(supportsAccountIdentification bool) ApiListInstitutionsRequest {
	r.supportsAccountIdentification = &supportsAccountIdentification
	return r
}

// Filter only institutions which support account statements.
func (r ApiListInstitutionsRequest) SupportsAccountStatement(supportsAccountStatement bool) ApiListInstitutionsRequest {
	r.supportsAccountStatement = &supportsAccountStatement
	return r
}

// Filter only institutions which support account verification.
func (r ApiListInstitutionsRequest) SupportsAccountVerification(supportsAccountVerification bool) ApiListInstitutionsRequest {
	r.supportsAccountVerification = &supportsAccountVerification
	return r
}

// Filter only institutions which support extended transaction history.
func (r ApiListInstitutionsRequest) SupportsTransactionHistory(supportsTransactionHistory bool) ApiListInstitutionsRequest {
	r.supportsTransactionHistory = &supportsTransactionHistory
	return r
}

func (r ApiListInstitutionsRequest) Execute() (*InstitutionsResponseBody, *http.Response, error) {
	return r.ApiService.ListInstitutionsExecute(r)
}

/*
ListInstitutions List institutions

This endpoint returns a list of institutions based on the specified search term or parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListInstitutionsRequest
*/
func (a *MxPlatformAPIService) ListInstitutions(ctx context.Context) ApiListInstitutionsRequest {
	return ApiListInstitutionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InstitutionsResponseBody
func (a *MxPlatformAPIService) ListInstitutionsExecute(r ApiListInstitutionsRequest) (*InstitutionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InstitutionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListInstitutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/institutions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.name != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name", r.name, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.supportsAccountIdentification != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supports_account_identification", r.supportsAccountIdentification, "")
	}
	if r.supportsAccountStatement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supports_account_statement", r.supportsAccountStatement, "")
	}
	if r.supportsAccountVerification != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supports_account_verification", r.supportsAccountVerification, "")
	}
	if r.supportsTransactionHistory != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "supports_transaction_history", r.supportsTransactionHistory, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListManagedAccountsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListManagedAccountsRequest) Page(page int32) ApiListManagedAccountsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListManagedAccountsRequest) RecordsPerPage(recordsPerPage int32) ApiListManagedAccountsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListManagedAccountsRequest) Execute() (*AccountsResponseBody, *http.Response, error) {
	return r.ApiService.ListManagedAccountsExecute(r)
}

/*
ListManagedAccounts List managed accounts

Use this endpoint to retrieve a list of all the partner-managed accounts associated with the given partner-manage member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListManagedAccountsRequest
*/
func (a *MxPlatformAPIService) ListManagedAccounts(ctx context.Context, memberGuid string, userGuid string) ApiListManagedAccountsRequest {
	return ApiListManagedAccountsRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountsResponseBody
func (a *MxPlatformAPIService) ListManagedAccountsExecute(r ApiListManagedAccountsRequest) (*AccountsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListManagedAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListManagedInstitutionsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListManagedInstitutionsRequest) Page(page int32) ApiListManagedInstitutionsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListManagedInstitutionsRequest) RecordsPerPage(recordsPerPage int32) ApiListManagedInstitutionsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListManagedInstitutionsRequest) Execute() (*InstitutionsResponseBody, *http.Response, error) {
	return r.ApiService.ListManagedInstitutionsExecute(r)
}

/*
ListManagedInstitutions List managed institutions

This endpoint returns a list of institutions which can be used to create partner-managed members.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListManagedInstitutionsRequest
*/
func (a *MxPlatformAPIService) ListManagedInstitutions(ctx context.Context) ApiListManagedInstitutionsRequest {
	return ApiListManagedInstitutionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return InstitutionsResponseBody
func (a *MxPlatformAPIService) ListManagedInstitutionsExecute(r ApiListManagedInstitutionsRequest) (*InstitutionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InstitutionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListManagedInstitutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/managed_institutions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListManagedMembersRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListManagedMembersRequest) Page(page int32) ApiListManagedMembersRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListManagedMembersRequest) RecordsPerPage(recordsPerPage int32) ApiListManagedMembersRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListManagedMembersRequest) Execute() (*MembersResponseBody, *http.Response, error) {
	return r.ApiService.ListManagedMembersExecute(r)
}

/*
ListManagedMembers List managed members

This endpoint returns a list of all the partner-managed members associated with the specified `user`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListManagedMembersRequest
*/
func (a *MxPlatformAPIService) ListManagedMembers(ctx context.Context, userGuid string) ApiListManagedMembersRequest {
	return ApiListManagedMembersRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MembersResponseBody
func (a *MxPlatformAPIService) ListManagedMembersExecute(r ApiListManagedMembersRequest) (*MembersResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembersResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListManagedMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListManagedTransactionsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListManagedTransactionsRequest) Page(page int32) ApiListManagedTransactionsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListManagedTransactionsRequest) RecordsPerPage(recordsPerPage int32) ApiListManagedTransactionsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListManagedTransactionsRequest) Execute() (*TransactionsResponseBody, *http.Response, error) {
	return r.ApiService.ListManagedTransactionsExecute(r)
}

/*
ListManagedTransactions List managed transactions

This endpoint returns a list of all the partner-managed transactions associated with the specified `account`, scoped through a `user` and a `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListManagedTransactionsRequest
*/
func (a *MxPlatformAPIService) ListManagedTransactions(ctx context.Context, accountGuid string, memberGuid string, userGuid string) ApiListManagedTransactionsRequest {
	return ApiListManagedTransactionsRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionsResponseBody
func (a *MxPlatformAPIService) ListManagedTransactionsExecute(r ApiListManagedTransactionsRequest) (*TransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListManagedTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMemberAccountsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	memberGuid string
	memberIsManagedByUser *bool
	page *int32
	recordsPerPage *int32
}

// List only accounts whose member is managed by the user.
func (r ApiListMemberAccountsRequest) MemberIsManagedByUser(memberIsManagedByUser bool) ApiListMemberAccountsRequest {
	r.memberIsManagedByUser = &memberIsManagedByUser
	return r
}

// Specify current page.
func (r ApiListMemberAccountsRequest) Page(page int32) ApiListMemberAccountsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListMemberAccountsRequest) RecordsPerPage(recordsPerPage int32) ApiListMemberAccountsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListMemberAccountsRequest) Execute() (*AccountsResponseBody, *http.Response, error) {
	return r.ApiService.ListMemberAccountsExecute(r)
}

/*
ListMemberAccounts List accounts by member

This endpoint returns a list of all the accounts associated with the specified `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @param memberGuid The unique id for a `member`.
 @return ApiListMemberAccountsRequest
*/
func (a *MxPlatformAPIService) ListMemberAccounts(ctx context.Context, userGuid string, memberGuid string) ApiListMemberAccountsRequest {
	return ApiListMemberAccountsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		memberGuid: memberGuid,
	}
}

// Execute executes the request
//  @return AccountsResponseBody
func (a *MxPlatformAPIService) ListMemberAccountsExecute(r ApiListMemberAccountsRequest) (*AccountsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListMemberAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.memberIsManagedByUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "member_is_managed_by_user", r.memberIsManagedByUser, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMemberChallengesRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListMemberChallengesRequest) Page(page int32) ApiListMemberChallengesRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListMemberChallengesRequest) RecordsPerPage(recordsPerPage int32) ApiListMemberChallengesRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListMemberChallengesRequest) Execute() (*ChallengesResponseBody, *http.Response, error) {
	return r.ApiService.ListMemberChallengesExecute(r)
}

/*
ListMemberChallenges List member challenges

Use this endpoint for information on what multi-factor authentication challenges need to be answered in order to aggregate a member. If the aggregation is not challenged, i.e., the member does not have a connection status of `CHALLENGED`, then code `204 No Content` will be returned. If the aggregation has been challenged, i.e., the member does have a connection status of `CHALLENGED`, then code `200 OK` will be returned - along with the corresponding credentials.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListMemberChallengesRequest
*/
func (a *MxPlatformAPIService) ListMemberChallenges(ctx context.Context, memberGuid string, userGuid string) ApiListMemberChallengesRequest {
	return ApiListMemberChallengesRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return ChallengesResponseBody
func (a *MxPlatformAPIService) ListMemberChallengesExecute(r ApiListMemberChallengesRequest) (*ChallengesResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChallengesResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListMemberChallenges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/challenges"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMemberCredentialsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListMemberCredentialsRequest) Page(page int32) ApiListMemberCredentialsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListMemberCredentialsRequest) RecordsPerPage(recordsPerPage int32) ApiListMemberCredentialsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListMemberCredentialsRequest) Execute() (*CredentialsResponseBody, *http.Response, error) {
	return r.ApiService.ListMemberCredentialsExecute(r)
}

/*
ListMemberCredentials List member credentials

This endpoint returns an array which contains information on every non-MFA credential associated with a specific member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListMemberCredentialsRequest
*/
func (a *MxPlatformAPIService) ListMemberCredentials(ctx context.Context, memberGuid string, userGuid string) ApiListMemberCredentialsRequest {
	return ApiListMemberCredentialsRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return CredentialsResponseBody
func (a *MxPlatformAPIService) ListMemberCredentialsExecute(r ApiListMemberCredentialsRequest) (*CredentialsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CredentialsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListMemberCredentials")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/credentials"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMembersRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListMembersRequest) Page(page int32) ApiListMembersRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListMembersRequest) RecordsPerPage(recordsPerPage int32) ApiListMembersRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListMembersRequest) Execute() (*MembersResponseBody, *http.Response, error) {
	return r.ApiService.ListMembersExecute(r)
}

/*
ListMembers List members

This endpoint returns an array which contains information on every member associated with a specific user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListMembersRequest
*/
func (a *MxPlatformAPIService) ListMembers(ctx context.Context, userGuid string) ApiListMembersRequest {
	return ApiListMembersRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MembersResponseBody
func (a *MxPlatformAPIService) ListMembersExecute(r ApiListMembersRequest) (*MembersResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MembersResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMerchantsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListMerchantsRequest) Page(page int32) ApiListMerchantsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListMerchantsRequest) RecordsPerPage(recordsPerPage int32) ApiListMerchantsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListMerchantsRequest) Execute() (*MerchantsResponseBody, *http.Response, error) {
	return r.ApiService.ListMerchantsExecute(r)
}

/*
ListMerchants List merchants

This endpoint returns a paginated list of all the merchants in the MX system.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListMerchantsRequest
*/
func (a *MxPlatformAPIService) ListMerchants(ctx context.Context) ApiListMerchantsRequest {
	return ApiListMerchantsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MerchantsResponseBody
func (a *MxPlatformAPIService) ListMerchantsExecute(r ApiListMerchantsRequest) (*MerchantsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListMerchants")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchants"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListRewardsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	memberGuid string
}

func (r ApiListRewardsRequest) Execute() (*RewardsResponseBody, *http.Response, error) {
	return r.ApiService.ListRewardsExecute(r)
}

/*
ListRewards List Rewards

Use this endpoint to list all the `rewards` associated with a specified `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @param memberGuid The unique identifier for the member. Defined by MX.
 @return ApiListRewardsRequest
*/
func (a *MxPlatformAPIService) ListRewards(ctx context.Context, userGuid string, memberGuid string) ApiListRewardsRequest {
	return ApiListRewardsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		memberGuid: memberGuid,
	}
}

// Execute executes the request
//  @return RewardsResponseBody
func (a *MxPlatformAPIService) ListRewardsExecute(r ApiListRewardsRequest) (*RewardsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListRewards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/rewards"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListStatementsByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListStatementsByMemberRequest) Page(page int32) ApiListStatementsByMemberRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListStatementsByMemberRequest) RecordsPerPage(recordsPerPage int32) ApiListStatementsByMemberRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListStatementsByMemberRequest) Execute() (*StatementsResponseBody, *http.Response, error) {
	return r.ApiService.ListStatementsByMemberExecute(r)
}

/*
ListStatementsByMember List statements by member

Use this endpoint to get an array of available statements.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListStatementsByMemberRequest
*/
func (a *MxPlatformAPIService) ListStatementsByMember(ctx context.Context, memberGuid string, userGuid string) ApiListStatementsByMemberRequest {
	return ApiListStatementsByMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return StatementsResponseBody
func (a *MxPlatformAPIService) ListStatementsByMemberExecute(r ApiListStatementsByMemberRequest) (*StatementsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StatementsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListStatementsByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/statements"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTaggingsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListTaggingsRequest) Page(page int32) ApiListTaggingsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTaggingsRequest) RecordsPerPage(recordsPerPage int32) ApiListTaggingsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListTaggingsRequest) Execute() (*TaggingsResponseBody, *http.Response, error) {
	return r.ApiService.ListTaggingsExecute(r)
}

/*
ListTaggings List taggings

Use this endpoint to retrieve a list of all the taggings associated with a specific user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListTaggingsRequest
*/
func (a *MxPlatformAPIService) ListTaggings(ctx context.Context, userGuid string) ApiListTaggingsRequest {
	return ApiListTaggingsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TaggingsResponseBody
func (a *MxPlatformAPIService) ListTaggingsExecute(r ApiListTaggingsRequest) (*TaggingsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaggingsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTaggings")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/taggings"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTagsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListTagsRequest) Page(page int32) ApiListTagsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTagsRequest) RecordsPerPage(recordsPerPage int32) ApiListTagsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListTagsRequest) Execute() (*TagsResponseBody, *http.Response, error) {
	return r.ApiService.ListTagsExecute(r)
}

/*
ListTags List tags

Use this endpoint to list all tags associated with the specified `user`. Each user includes the `Business` tag by default.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListTagsRequest
*/
func (a *MxPlatformAPIService) ListTags(ctx context.Context, userGuid string) ApiListTagsRequest {
	return ApiListTagsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TagsResponseBody
func (a *MxPlatformAPIService) ListTagsExecute(r ApiListTagsRequest) (*TagsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TagsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTags")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/tags"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTaxDocumentsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListTaxDocumentsRequest) Page(page int32) ApiListTaxDocumentsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTaxDocumentsRequest) RecordsPerPage(recordsPerPage int32) ApiListTaxDocumentsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListTaxDocumentsRequest) Execute() (*TaxDocumentsResponseBody, *http.Response, error) {
	return r.ApiService.ListTaxDocumentsExecute(r)
}

/*
ListTaxDocuments List Tax Documents

Use this endpoint to get a paginated list of tax documents.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListTaxDocumentsRequest
*/
func (a *MxPlatformAPIService) ListTaxDocuments(ctx context.Context, memberGuid string, userGuid string) ApiListTaxDocumentsRequest {
	return ApiListTaxDocumentsRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TaxDocumentsResponseBody
func (a *MxPlatformAPIService) ListTaxDocumentsExecute(r ApiListTaxDocumentsRequest) (*TaxDocumentsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxDocumentsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTaxDocuments")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/tax_documents"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTransactionRulesRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	page *int32
	recordsPerPage *int32
}

// Specify current page.
func (r ApiListTransactionRulesRequest) Page(page int32) ApiListTransactionRulesRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTransactionRulesRequest) RecordsPerPage(recordsPerPage int32) ApiListTransactionRulesRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListTransactionRulesRequest) Execute() (*TransactionRulesResponseBody, *http.Response, error) {
	return r.ApiService.ListTransactionRulesExecute(r)
}

/*
ListTransactionRules List transaction rules

Use this endpoint to read the attributes of all existing transaction rules belonging to the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListTransactionRulesRequest
*/
func (a *MxPlatformAPIService) ListTransactionRules(ctx context.Context, userGuid string) ApiListTransactionRulesRequest {
	return ApiListTransactionRulesRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionRulesResponseBody
func (a *MxPlatformAPIService) ListTransactionRulesExecute(r ApiListTransactionRulesRequest) (*TransactionRulesResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionRulesResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTransactionRules")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transaction_rules"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTransactionsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	fromDate *string
	page *int32
	recordsPerPage *int32
	toDate *string
}

// Filter transactions from this date.
func (r ApiListTransactionsRequest) FromDate(fromDate string) ApiListTransactionsRequest {
	r.fromDate = &fromDate
	return r
}

// Specify current page.
func (r ApiListTransactionsRequest) Page(page int32) ApiListTransactionsRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTransactionsRequest) RecordsPerPage(recordsPerPage int32) ApiListTransactionsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter transactions to this date.
func (r ApiListTransactionsRequest) ToDate(toDate string) ApiListTransactionsRequest {
	r.toDate = &toDate
	return r
}

func (r ApiListTransactionsRequest) Execute() (*TransactionsResponseBody, *http.Response, error) {
	return r.ApiService.ListTransactionsExecute(r)
}

/*
ListTransactions List transactions

Requests to this endpoint return a list of transactions associated with the specified `user`, accross all members and accounts associated with that `user`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListTransactionsRequest
*/
func (a *MxPlatformAPIService) ListTransactions(ctx context.Context, userGuid string) ApiListTransactionsRequest {
	return ApiListTransactionsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionsResponseBody
func (a *MxPlatformAPIService) ListTransactionsExecute(r ApiListTransactionsRequest) (*TransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTransactions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTransactionsByAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	userGuid string
	fromDate *string
	page *int32
	recordsPerPage *int32
	toDate *string
}

// Filter transactions from this date.
func (r ApiListTransactionsByAccountRequest) FromDate(fromDate string) ApiListTransactionsByAccountRequest {
	r.fromDate = &fromDate
	return r
}

// Specify current page.
func (r ApiListTransactionsByAccountRequest) Page(page int32) ApiListTransactionsByAccountRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTransactionsByAccountRequest) RecordsPerPage(recordsPerPage int32) ApiListTransactionsByAccountRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter transactions to this date.
func (r ApiListTransactionsByAccountRequest) ToDate(toDate string) ApiListTransactionsByAccountRequest {
	r.toDate = &toDate
	return r
}

func (r ApiListTransactionsByAccountRequest) Execute() (*TransactionsResponseBody, *http.Response, error) {
	return r.ApiService.ListTransactionsByAccountExecute(r)
}

/*
ListTransactionsByAccount List transactions by account

This endpoint returns a list of the last 90 days of transactions associated with the specified account.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param userGuid The unique id for a `user`.
 @return ApiListTransactionsByAccountRequest
*/
func (a *MxPlatformAPIService) ListTransactionsByAccount(ctx context.Context, accountGuid string, userGuid string) ApiListTransactionsByAccountRequest {
	return ApiListTransactionsByAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionsResponseBody
func (a *MxPlatformAPIService) ListTransactionsByAccountExecute(r ApiListTransactionsByAccountRequest) (*TransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTransactionsByAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts/{account_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTransactionsByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	fromDate *string
	page *int32
	recordsPerPage *int32
	toDate *string
}

// Filter transactions from this date.
func (r ApiListTransactionsByMemberRequest) FromDate(fromDate string) ApiListTransactionsByMemberRequest {
	r.fromDate = &fromDate
	return r
}

// Specify current page.
func (r ApiListTransactionsByMemberRequest) Page(page int32) ApiListTransactionsByMemberRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTransactionsByMemberRequest) RecordsPerPage(recordsPerPage int32) ApiListTransactionsByMemberRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter transactions to this date.
func (r ApiListTransactionsByMemberRequest) ToDate(toDate string) ApiListTransactionsByMemberRequest {
	r.toDate = &toDate
	return r
}

func (r ApiListTransactionsByMemberRequest) Execute() (*TransactionsResponseBody, *http.Response, error) {
	return r.ApiService.ListTransactionsByMemberExecute(r)
}

/*
ListTransactionsByMember List transactions by member

Requests to this endpoint return a list of transactions associated with the specified `member`, accross all accounts associated with that `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiListTransactionsByMemberRequest
*/
func (a *MxPlatformAPIService) ListTransactionsByMember(ctx context.Context, memberGuid string, userGuid string) ApiListTransactionsByMemberRequest {
	return ApiListTransactionsByMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionsResponseBody
func (a *MxPlatformAPIService) ListTransactionsByMemberExecute(r ApiListTransactionsByMemberRequest) (*TransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTransactionsByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTransactionsByTagRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	tagGuid string
	userGuid string
	fromDate *string
	page *int32
	recordsPerPage *int32
	toDate *string
}

// Filter transactions from this date.
func (r ApiListTransactionsByTagRequest) FromDate(fromDate string) ApiListTransactionsByTagRequest {
	r.fromDate = &fromDate
	return r
}

// Specify current page.
func (r ApiListTransactionsByTagRequest) Page(page int32) ApiListTransactionsByTagRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListTransactionsByTagRequest) RecordsPerPage(recordsPerPage int32) ApiListTransactionsByTagRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// Filter transactions to this date.
func (r ApiListTransactionsByTagRequest) ToDate(toDate string) ApiListTransactionsByTagRequest {
	r.toDate = &toDate
	return r
}

func (r ApiListTransactionsByTagRequest) Execute() (*TransactionsResponseBody, *http.Response, error) {
	return r.ApiService.ListTransactionsByTagExecute(r)
}

/*
ListTransactionsByTag List transactions by tag

Use this endpoint to get a list of all transactions associated with a particular tag according to the tag’s unique GUID. In other words, a list of all transactions that have been assigned to a particular tag using the create a tagging endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tagGuid The unique id for a `tag`.
 @param userGuid The unique id for a `user`.
 @return ApiListTransactionsByTagRequest
*/
func (a *MxPlatformAPIService) ListTransactionsByTag(ctx context.Context, tagGuid string, userGuid string) ApiListTransactionsByTagRequest {
	return ApiListTransactionsByTagRequest{
		ApiService: a,
		ctx: ctx,
		tagGuid: tagGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionsResponseBody
func (a *MxPlatformAPIService) ListTransactionsByTagExecute(r ApiListTransactionsByTagRequest) (*TransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListTransactionsByTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/tags/{tag_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"tag_guid"+"}", url.PathEscape(parameterValueToString(r.tagGuid, "tagGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "from_date", r.fromDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "to_date", r.toDate, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUserAccountsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	memberIsManagedByUser *bool
	page *int32
	isManual *bool
	recordsPerPage *int32
}

// List only accounts whose member is managed by the user.
func (r ApiListUserAccountsRequest) MemberIsManagedByUser(memberIsManagedByUser bool) ApiListUserAccountsRequest {
	r.memberIsManagedByUser = &memberIsManagedByUser
	return r
}

// Specify current page.
func (r ApiListUserAccountsRequest) Page(page int32) ApiListUserAccountsRequest {
	r.page = &page
	return r
}

// List only accounts that were manually created.
func (r ApiListUserAccountsRequest) IsManual(isManual bool) ApiListUserAccountsRequest {
	r.isManual = &isManual
	return r
}

// Specify records per page.
func (r ApiListUserAccountsRequest) RecordsPerPage(recordsPerPage int32) ApiListUserAccountsRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

func (r ApiListUserAccountsRequest) Execute() (*AccountsResponseBody, *http.Response, error) {
	return r.ApiService.ListUserAccountsExecute(r)
}

/*
ListUserAccounts List accounts

This endpoint returns a list of all the accounts associated with the specified `user`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiListUserAccountsRequest
*/
func (a *MxPlatformAPIService) ListUserAccounts(ctx context.Context, userGuid string) ApiListUserAccountsRequest {
	return ApiListUserAccountsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountsResponseBody
func (a *MxPlatformAPIService) ListUserAccountsExecute(r ApiListUserAccountsRequest) (*AccountsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListUserAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.memberIsManagedByUser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "member_is_managed_by_user", r.memberIsManagedByUser, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.isManual != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_manual", r.isManual, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListUsersRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	page *int32
	recordsPerPage *int32
	id *string
	email *string
	isDisabled *bool
}

// Specify current page.
func (r ApiListUsersRequest) Page(page int32) ApiListUsersRequest {
	r.page = &page
	return r
}

// Specify records per page.
func (r ApiListUsersRequest) RecordsPerPage(recordsPerPage int32) ApiListUsersRequest {
	r.recordsPerPage = &recordsPerPage
	return r
}

// The user &#x60;id&#x60; to search for.
func (r ApiListUsersRequest) Id(id string) ApiListUsersRequest {
	r.id = &id
	return r
}

// The user &#x60;email&#x60; to search for.
func (r ApiListUsersRequest) Email(email string) ApiListUsersRequest {
	r.email = &email
	return r
}

// Search for users that are diabled.
func (r ApiListUsersRequest) IsDisabled(isDisabled bool) ApiListUsersRequest {
	r.isDisabled = &isDisabled
	return r
}

func (r ApiListUsersRequest) Execute() (*UsersResponseBody, *http.Response, error) {
	return r.ApiService.ListUsersExecute(r)
}

/*
ListUsers List users

Use this endpoint to list every user you've created in the MX Platform API.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListUsersRequest
*/
func (a *MxPlatformAPIService) ListUsers(ctx context.Context) ApiListUsersRequest {
	return ApiListUsersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsersResponseBody
func (a *MxPlatformAPIService) ListUsersExecute(r ApiListUsersRequest) (*UsersResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ListUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.recordsPerPage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "records_per_page", r.recordsPerPage, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.email != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "email", r.email, "")
	}
	if r.isDisabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "is_disabled", r.isDisabled, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	userGuid string
}

func (r ApiReadAccountRequest) Execute() (*AccountResponseBody, *http.Response, error) {
	return r.ApiService.ReadAccountExecute(r)
}

/*
ReadAccount Read account

This endpoint returns the specified `account` resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param userGuid The unique id for a `user`.
 @return ApiReadAccountRequest
*/
func (a *MxPlatformAPIService) ReadAccount(ctx context.Context, accountGuid string, userGuid string) ApiReadAccountRequest {
	return ApiReadAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountResponseBody
func (a *MxPlatformAPIService) ReadAccountExecute(r ApiReadAccountRequest) (*AccountResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts/{account_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadAccountByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	userGuid string
}

func (r ApiReadAccountByMemberRequest) Execute() (*AccountResponseBody, *http.Response, error) {
	return r.ApiService.ReadAccountByMemberExecute(r)
}

/*
ReadAccountByMember Read account by member

This endpoint allows you to read the attributes of an `account` resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiReadAccountByMemberRequest
*/
func (a *MxPlatformAPIService) ReadAccountByMember(ctx context.Context, accountGuid string, memberGuid string, userGuid string) ApiReadAccountByMemberRequest {
	return ApiReadAccountByMemberRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountResponseBody
func (a *MxPlatformAPIService) ReadAccountByMemberExecute(r ApiReadAccountByMemberRequest) (*AccountResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadAccountByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/accounts/{account_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadCategoryRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	categoryGuid string
	userGuid string
}

func (r ApiReadCategoryRequest) Execute() (*CategoryResponseBody, *http.Response, error) {
	return r.ApiService.ReadCategoryExecute(r)
}

/*
ReadCategory Read a custom category

Use this endpoint to read the attributes of either a default category or a custom category.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param categoryGuid The unique id for a `category`.
 @param userGuid The unique id for a `user`.
 @return ApiReadCategoryRequest
*/
func (a *MxPlatformAPIService) ReadCategory(ctx context.Context, categoryGuid string, userGuid string) ApiReadCategoryRequest {
	return ApiReadCategoryRequest{
		ApiService: a,
		ctx: ctx,
		categoryGuid: categoryGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return CategoryResponseBody
func (a *MxPlatformAPIService) ReadCategoryExecute(r ApiReadCategoryRequest) (*CategoryResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadCategory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/categories/{category_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"category_guid"+"}", url.PathEscape(parameterValueToString(r.categoryGuid, "categoryGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadDefaultCategoryRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	categoryGuid string
}

func (r ApiReadDefaultCategoryRequest) Execute() (*CategoryResponseBody, *http.Response, error) {
	return r.ApiService.ReadDefaultCategoryExecute(r)
}

/*
ReadDefaultCategory Read a default category

Use this endpoint to read the attributes of a default category.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param categoryGuid The unique id for a `category`.
 @return ApiReadDefaultCategoryRequest
*/
func (a *MxPlatformAPIService) ReadDefaultCategory(ctx context.Context, categoryGuid string) ApiReadDefaultCategoryRequest {
	return ApiReadDefaultCategoryRequest{
		ApiService: a,
		ctx: ctx,
		categoryGuid: categoryGuid,
	}
}

// Execute executes the request
//  @return CategoryResponseBody
func (a *MxPlatformAPIService) ReadDefaultCategoryExecute(r ApiReadDefaultCategoryRequest) (*CategoryResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadDefaultCategory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/categories/{category_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"category_guid"+"}", url.PathEscape(parameterValueToString(r.categoryGuid, "categoryGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadHoldingRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	holdingGuid string
	userGuid string
}

func (r ApiReadHoldingRequest) Execute() (*HoldingResponseBody, *http.Response, error) {
	return r.ApiService.ReadHoldingExecute(r)
}

/*
ReadHolding Read holding

Use this endpoint to read the attributes of a specific `holding`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param holdingGuid The unique id for a `holding`.
 @param userGuid The unique id for a `user`.
 @return ApiReadHoldingRequest
*/
func (a *MxPlatformAPIService) ReadHolding(ctx context.Context, holdingGuid string, userGuid string) ApiReadHoldingRequest {
	return ApiReadHoldingRequest{
		ApiService: a,
		ctx: ctx,
		holdingGuid: holdingGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return HoldingResponseBody
func (a *MxPlatformAPIService) ReadHoldingExecute(r ApiReadHoldingRequest) (*HoldingResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *HoldingResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadHolding")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/holdings/{holding_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"holding_guid"+"}", url.PathEscape(parameterValueToString(r.holdingGuid, "holdingGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadInstitutionRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	institutionCode string
}

func (r ApiReadInstitutionRequest) Execute() (*InstitutionResponseBody, *http.Response, error) {
	return r.ApiService.ReadInstitutionExecute(r)
}

/*
ReadInstitution Read institution

This endpoint returns information about the institution specified by `institution_code`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param institutionCode The institution_code of the institution.
 @return ApiReadInstitutionRequest
*/
func (a *MxPlatformAPIService) ReadInstitution(ctx context.Context, institutionCode string) ApiReadInstitutionRequest {
	return ApiReadInstitutionRequest{
		ApiService: a,
		ctx: ctx,
		institutionCode: institutionCode,
	}
}

// Execute executes the request
//  @return InstitutionResponseBody
func (a *MxPlatformAPIService) ReadInstitutionExecute(r ApiReadInstitutionRequest) (*InstitutionResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InstitutionResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadInstitution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/institutions/{institution_code}"
	localVarPath = strings.Replace(localVarPath, "{"+"institution_code"+"}", url.PathEscape(parameterValueToString(r.institutionCode, "institutionCode")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadManagedAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	userGuid string
}

func (r ApiReadManagedAccountRequest) Execute() (*AccountResponseBody, *http.Response, error) {
	return r.ApiService.ReadManagedAccountExecute(r)
}

/*
ReadManagedAccount Read managed account

Use this endpoint to read the attributes of a partner-managed account according to its unique guid.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiReadManagedAccountRequest
*/
func (a *MxPlatformAPIService) ReadManagedAccount(ctx context.Context, accountGuid string, memberGuid string, userGuid string) ApiReadManagedAccountRequest {
	return ApiReadManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountResponseBody
func (a *MxPlatformAPIService) ReadManagedAccountExecute(r ApiReadManagedAccountRequest) (*AccountResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadManagedMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiReadManagedMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.ReadManagedMemberExecute(r)
}

/*
ReadManagedMember Read managed member

This endpoint returns the attributes of the specified partner-managed `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiReadManagedMemberRequest
*/
func (a *MxPlatformAPIService) ReadManagedMember(ctx context.Context, memberGuid string, userGuid string) ApiReadManagedMemberRequest {
	return ApiReadManagedMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) ReadManagedMemberExecute(r ApiReadManagedMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadManagedMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadManagedTransactionRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	transactionGuid string
	userGuid string
}

func (r ApiReadManagedTransactionRequest) Execute() (*TransactionResponseBody, *http.Response, error) {
	return r.ApiService.ReadManagedTransactionExecute(r)
}

/*
ReadManagedTransaction Read managed transaction

Requests to this endpoint will return the attributes of the specified partner-managed `transaction`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param transactionGuid The unique id for a `transaction`.
 @param userGuid The unique id for a `user`.
 @return ApiReadManagedTransactionRequest
*/
func (a *MxPlatformAPIService) ReadManagedTransaction(ctx context.Context, accountGuid string, memberGuid string, transactionGuid string, userGuid string) ApiReadManagedTransactionRequest {
	return ApiReadManagedTransactionRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		transactionGuid: transactionGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionResponseBody
func (a *MxPlatformAPIService) ReadManagedTransactionExecute(r ApiReadManagedTransactionRequest) (*TransactionResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadManagedTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_guid"+"}", url.PathEscape(parameterValueToString(r.transactionGuid, "transactionGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiReadMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.ReadMemberExecute(r)
}

/*
ReadMember Read member

Use this endpoint to read the attributes of a specific member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiReadMemberRequest
*/
func (a *MxPlatformAPIService) ReadMember(ctx context.Context, memberGuid string, userGuid string) ApiReadMemberRequest {
	return ApiReadMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) ReadMemberExecute(r ApiReadMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadMemberStatusRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiReadMemberStatusRequest) Execute() (*MemberStatusResponseBody, *http.Response, error) {
	return r.ApiService.ReadMemberStatusExecute(r)
}

/*
ReadMemberStatus Read member status

This endpoint provides the status of the members most recent aggregation event. This is an important step in the aggregation process, and the results returned by this endpoint should determine what you do next in order to successfully aggregate a member. MX has introduced new, more detailed information on the current status of a members connection to a financial institution and the state of its aggregation - the connection_status field. These are intended to replace and expand upon the information provided in the status field, which will soon be deprecated; support for the status field remains for the time being.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiReadMemberStatusRequest
*/
func (a *MxPlatformAPIService) ReadMemberStatus(ctx context.Context, memberGuid string, userGuid string) ApiReadMemberStatusRequest {
	return ApiReadMemberStatusRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberStatusResponseBody
func (a *MxPlatformAPIService) ReadMemberStatusExecute(r ApiReadMemberStatusRequest) (*MemberStatusResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberStatusResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadMemberStatus")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/status"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadMerchantRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	merchantGuid string
}

func (r ApiReadMerchantRequest) Execute() (*MerchantResponseBody, *http.Response, error) {
	return r.ApiService.ReadMerchantExecute(r)
}

/*
ReadMerchant Read merchant

Returns information about a particular merchant, such as a logo, name, and website.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantGuid The unique id for a `merchant`.
 @return ApiReadMerchantRequest
*/
func (a *MxPlatformAPIService) ReadMerchant(ctx context.Context, merchantGuid string) ApiReadMerchantRequest {
	return ApiReadMerchantRequest{
		ApiService: a,
		ctx: ctx,
		merchantGuid: merchantGuid,
	}
}

// Execute executes the request
//  @return MerchantResponseBody
func (a *MxPlatformAPIService) ReadMerchantExecute(r ApiReadMerchantRequest) (*MerchantResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadMerchant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchants/{merchant_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"merchant_guid"+"}", url.PathEscape(parameterValueToString(r.merchantGuid, "merchantGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadMerchantLocationRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	merchantLocationGuid string
}

func (r ApiReadMerchantLocationRequest) Execute() (*MerchantLocationResponseBody, *http.Response, error) {
	return r.ApiService.ReadMerchantLocationExecute(r)
}

/*
ReadMerchantLocation Read merchant location

This endpoint returns the specified merchant_location resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantLocationGuid The unique id for a `merchant_location`.
 @return ApiReadMerchantLocationRequest
*/
func (a *MxPlatformAPIService) ReadMerchantLocation(ctx context.Context, merchantLocationGuid string) ApiReadMerchantLocationRequest {
	return ApiReadMerchantLocationRequest{
		ApiService: a,
		ctx: ctx,
		merchantLocationGuid: merchantLocationGuid,
	}
}

// Execute executes the request
//  @return MerchantLocationResponseBody
func (a *MxPlatformAPIService) ReadMerchantLocationExecute(r ApiReadMerchantLocationRequest) (*MerchantLocationResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MerchantLocationResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadMerchantLocation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/merchant_locations/{merchant_location_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"merchant_location_guid"+"}", url.PathEscape(parameterValueToString(r.merchantLocationGuid, "merchantLocationGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadRewardsRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	memberGuid string
	rewardGuid string
}

func (r ApiReadRewardsRequest) Execute() (*RewardResponseBody, *http.Response, error) {
	return r.ApiService.ReadRewardsExecute(r)
}

/*
ReadRewards Read Reward

Use this endpoint to read a specific `reward` based on its unique GUID..

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @param memberGuid The unique identifier for the member. Defined by MX.
 @param rewardGuid The unique identifier for the rewards. Defined by MX.
 @return ApiReadRewardsRequest
*/
func (a *MxPlatformAPIService) ReadRewards(ctx context.Context, userGuid string, memberGuid string, rewardGuid string) ApiReadRewardsRequest {
	return ApiReadRewardsRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		memberGuid: memberGuid,
		rewardGuid: rewardGuid,
	}
}

// Execute executes the request
//  @return RewardResponseBody
func (a *MxPlatformAPIService) ReadRewardsExecute(r ApiReadRewardsRequest) (*RewardResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RewardResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadRewards")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/rewards/{reward_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"reward_guid"+"}", url.PathEscape(parameterValueToString(r.rewardGuid, "rewardGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadStatementByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	statementGuid string
	userGuid string
}

func (r ApiReadStatementByMemberRequest) Execute() (*StatementResponseBody, *http.Response, error) {
	return r.ApiService.ReadStatementByMemberExecute(r)
}

/*
ReadStatementByMember Read statement by member

Use this endpoint to read a JSON representation of the statement.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param statementGuid The unique id for a `statement`.
 @param userGuid The unique id for a `user`.
 @return ApiReadStatementByMemberRequest
*/
func (a *MxPlatformAPIService) ReadStatementByMember(ctx context.Context, memberGuid string, statementGuid string, userGuid string) ApiReadStatementByMemberRequest {
	return ApiReadStatementByMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		statementGuid: statementGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return StatementResponseBody
func (a *MxPlatformAPIService) ReadStatementByMemberExecute(r ApiReadStatementByMemberRequest) (*StatementResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StatementResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadStatementByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/statements/{statement_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"statement_guid"+"}", url.PathEscape(parameterValueToString(r.statementGuid, "statementGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTagRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	tagGuid string
	userGuid string
}

func (r ApiReadTagRequest) Execute() (*TagResponseBody, *http.Response, error) {
	return r.ApiService.ReadTagExecute(r)
}

/*
ReadTag Read tag

Use this endpoint to read the attributes of a particular tag according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tagGuid The unique id for a `tag`.
 @param userGuid The unique id for a `user`.
 @return ApiReadTagRequest
*/
func (a *MxPlatformAPIService) ReadTag(ctx context.Context, tagGuid string, userGuid string) ApiReadTagRequest {
	return ApiReadTagRequest{
		ApiService: a,
		ctx: ctx,
		tagGuid: tagGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TagResponseBody
func (a *MxPlatformAPIService) ReadTagExecute(r ApiReadTagRequest) (*TagResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TagResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/tags/{tag_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"tag_guid"+"}", url.PathEscape(parameterValueToString(r.tagGuid, "tagGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTaggingRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	taggingGuid string
	userGuid string
}

func (r ApiReadTaggingRequest) Execute() (*TaggingResponseBody, *http.Response, error) {
	return r.ApiService.ReadTaggingExecute(r)
}

/*
ReadTagging Read tagging

Use this endpoint to read the attributes of a `tagging` according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taggingGuid The unique id for a `tagging`.
 @param userGuid The unique id for a `user`.
 @return ApiReadTaggingRequest
*/
func (a *MxPlatformAPIService) ReadTagging(ctx context.Context, taggingGuid string, userGuid string) ApiReadTaggingRequest {
	return ApiReadTaggingRequest{
		ApiService: a,
		ctx: ctx,
		taggingGuid: taggingGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TaggingResponseBody
func (a *MxPlatformAPIService) ReadTaggingExecute(r ApiReadTaggingRequest) (*TaggingResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaggingResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadTagging")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/taggings/{tagging_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"tagging_guid"+"}", url.PathEscape(parameterValueToString(r.taggingGuid, "taggingGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTaxDocumentRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	taxDocumentGuid string
	memberGuid string
	userGuid string
}

func (r ApiReadTaxDocumentRequest) Execute() (*TaxDocumentResponseBody, *http.Response, error) {
	return r.ApiService.ReadTaxDocumentExecute(r)
}

/*
ReadTaxDocument Read a Tax Document

Use this endpoint to read the attributes of the specified tax document.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taxDocumentGuid The unique id for a `tax_document`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiReadTaxDocumentRequest
*/
func (a *MxPlatformAPIService) ReadTaxDocument(ctx context.Context, taxDocumentGuid string, memberGuid string, userGuid string) ApiReadTaxDocumentRequest {
	return ApiReadTaxDocumentRequest{
		ApiService: a,
		ctx: ctx,
		taxDocumentGuid: taxDocumentGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TaxDocumentResponseBody
func (a *MxPlatformAPIService) ReadTaxDocumentExecute(r ApiReadTaxDocumentRequest) (*TaxDocumentResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaxDocumentResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadTaxDocument")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/tax_documents/{tax_document_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"tax_document_guid"+"}", url.PathEscape(parameterValueToString(r.taxDocumentGuid, "taxDocumentGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTransactionRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	transactionGuid string
	userGuid string
}

func (r ApiReadTransactionRequest) Execute() (*TransactionResponseBody, *http.Response, error) {
	return r.ApiService.ReadTransactionExecute(r)
}

/*
ReadTransaction Read transaction

Requests to this endpoint will return the attributes of the specified `transaction`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transactionGuid The unique id for a `transaction`.
 @param userGuid The unique id for a `user`.
 @return ApiReadTransactionRequest
*/
func (a *MxPlatformAPIService) ReadTransaction(ctx context.Context, transactionGuid string, userGuid string) ApiReadTransactionRequest {
	return ApiReadTransactionRequest{
		ApiService: a,
		ctx: ctx,
		transactionGuid: transactionGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionResponseBody
func (a *MxPlatformAPIService) ReadTransactionExecute(r ApiReadTransactionRequest) (*TransactionResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transactions/{transaction_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_guid"+"}", url.PathEscape(parameterValueToString(r.transactionGuid, "transactionGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadTransactionRuleRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	transactionRuleGuid string
	userGuid string
}

func (r ApiReadTransactionRuleRequest) Execute() (*TransactionRuleResponseBody, *http.Response, error) {
	return r.ApiService.ReadTransactionRuleExecute(r)
}

/*
ReadTransactionRule Read transaction rule

Use this endpoint to read the attributes of an existing transaction rule based on the rule’s unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transactionRuleGuid The unique id for a `transaction_rule`.
 @param userGuid The unique id for a `user`.
 @return ApiReadTransactionRuleRequest
*/
func (a *MxPlatformAPIService) ReadTransactionRule(ctx context.Context, transactionRuleGuid string, userGuid string) ApiReadTransactionRuleRequest {
	return ApiReadTransactionRuleRequest{
		ApiService: a,
		ctx: ctx,
		transactionRuleGuid: transactionRuleGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionRuleResponseBody
func (a *MxPlatformAPIService) ReadTransactionRuleExecute(r ApiReadTransactionRuleRequest) (*TransactionRuleResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionRuleResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadTransactionRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transaction_rules/{transaction_rule_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_rule_guid"+"}", url.PathEscape(parameterValueToString(r.transactionRuleGuid, "transactionRuleGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReadUserRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
}

func (r ApiReadUserRequest) Execute() (*UserResponseBody, *http.Response, error) {
	return r.ApiService.ReadUserExecute(r)
}

/*
ReadUser Read user

Use this endpoint to read the attributes of a specific user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiReadUserRequest
*/
func (a *MxPlatformAPIService) ReadUser(ctx context.Context, userGuid string) ApiReadUserRequest {
	return ApiReadUserRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return UserResponseBody
func (a *MxPlatformAPIService) ReadUserExecute(r ApiReadUserRequest) (*UserResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ReadUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRequestAuthorizationCodeRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	authorizationCodeRequestBody *AuthorizationCodeRequestBody
}

// The scope for the authorization code.
func (r ApiRequestAuthorizationCodeRequest) AuthorizationCodeRequestBody(authorizationCodeRequestBody AuthorizationCodeRequestBody) ApiRequestAuthorizationCodeRequest {
	r.authorizationCodeRequestBody = &authorizationCodeRequestBody
	return r
}

func (r ApiRequestAuthorizationCodeRequest) Execute() (*AuthorizationCodeResponseBody, *http.Response, error) {
	return r.ApiService.RequestAuthorizationCodeExecute(r)
}

/*
RequestAuthorizationCode Request an authorization code.

Clients use this endpoint to request an authorization code according to the parameters specified in the scope. Clients then pass this code to processors. Processor access is scoped only to the GUIDs and features specified in this request. Before requesting an authorization code which includes a member in the scope, clients must have verified that member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRequestAuthorizationCodeRequest
*/
func (a *MxPlatformAPIService) RequestAuthorizationCode(ctx context.Context) ApiRequestAuthorizationCodeRequest {
	return ApiRequestAuthorizationCodeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AuthorizationCodeResponseBody
func (a *MxPlatformAPIService) RequestAuthorizationCodeExecute(r ApiRequestAuthorizationCodeRequest) (*AuthorizationCodeResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AuthorizationCodeResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.RequestAuthorizationCode")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/authorization_code"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.authorizationCodeRequestBody == nil {
		return localVarReturnValue, nil, reportError("authorizationCodeRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.authorizationCodeRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRequestConnectWidgetURLRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	connectWidgetRequestBody *ConnectWidgetRequestBody
}

// Optional config options for WebView (is_mobile_webview, current_institution_code, current_member_guid, update_credentials)
func (r ApiRequestConnectWidgetURLRequest) ConnectWidgetRequestBody(connectWidgetRequestBody ConnectWidgetRequestBody) ApiRequestConnectWidgetURLRequest {
	r.connectWidgetRequestBody = &connectWidgetRequestBody
	return r
}

func (r ApiRequestConnectWidgetURLRequest) Execute() (*ConnectWidgetResponseBody, *http.Response, error) {
	return r.ApiService.RequestConnectWidgetURLExecute(r)
}

/*
RequestConnectWidgetURL Request connect widget url

This endpoint will return a URL for an embeddable version of MX Connect.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiRequestConnectWidgetURLRequest
*/
func (a *MxPlatformAPIService) RequestConnectWidgetURL(ctx context.Context, userGuid string) ApiRequestConnectWidgetURLRequest {
	return ApiRequestConnectWidgetURLRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return ConnectWidgetResponseBody
func (a *MxPlatformAPIService) RequestConnectWidgetURLExecute(r ApiRequestConnectWidgetURLRequest) (*ConnectWidgetResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ConnectWidgetResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.RequestConnectWidgetURL")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/connect_widget_url"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.connectWidgetRequestBody == nil {
		return localVarReturnValue, nil, reportError("connectWidgetRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.connectWidgetRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRequestOAuthWindowURIRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	clientRedirectUrl *string
	enableApp2app *string
	referralSource *string
	skipAggregation *bool
	uiMessageWebviewUrlScheme *string
}

// A URL that MX will redirect to at the end of OAuth with additional query parameters. Only available with &#x60;referral_source&#x3D;APP&#x60;.
func (r ApiRequestOAuthWindowURIRequest) ClientRedirectUrl(clientRedirectUrl string) ApiRequestOAuthWindowURIRequest {
	r.clientRedirectUrl = &clientRedirectUrl
	return r
}

// This indicates whether OAuth app2app behavior is enabled for institutions that support it. Defaults to &#x60;true&#x60;. This setting is not persistent.
func (r ApiRequestOAuthWindowURIRequest) EnableApp2app(enableApp2app string) ApiRequestOAuthWindowURIRequest {
	r.enableApp2app = &enableApp2app
	return r
}

// Must be either &#x60;BROWSER&#x60; or &#x60;APP&#x60; depending on the implementation. Defaults to &#x60;BROWSER&#x60;.
func (r ApiRequestOAuthWindowURIRequest) ReferralSource(referralSource string) ApiRequestOAuthWindowURIRequest {
	r.referralSource = &referralSource
	return r
}

// Setting this parameter to &#x60;true&#x60; will prevent the member from automatically aggregating after being redirected from the authorization page.
func (r ApiRequestOAuthWindowURIRequest) SkipAggregation(skipAggregation bool) ApiRequestOAuthWindowURIRequest {
	r.skipAggregation = &skipAggregation
	return r
}

// A scheme for routing the user back to the application state they were previously in. Only available with &#x60;referral_source&#x3D;APP&#x60;.
func (r ApiRequestOAuthWindowURIRequest) UiMessageWebviewUrlScheme(uiMessageWebviewUrlScheme string) ApiRequestOAuthWindowURIRequest {
	r.uiMessageWebviewUrlScheme = &uiMessageWebviewUrlScheme
	return r
}

func (r ApiRequestOAuthWindowURIRequest) Execute() (*OAuthWindowResponseBody, *http.Response, error) {
	return r.ApiService.RequestOAuthWindowURIExecute(r)
}

/*
RequestOAuthWindowURI Request oauth window uri

This endpoint will generate an `oauth_window_uri` for the specified `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiRequestOAuthWindowURIRequest
*/
func (a *MxPlatformAPIService) RequestOAuthWindowURI(ctx context.Context, memberGuid string, userGuid string) ApiRequestOAuthWindowURIRequest {
	return ApiRequestOAuthWindowURIRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return OAuthWindowResponseBody
func (a *MxPlatformAPIService) RequestOAuthWindowURIExecute(r ApiRequestOAuthWindowURIRequest) (*OAuthWindowResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OAuthWindowResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.RequestOAuthWindowURI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/oauth_window_uri"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.clientRedirectUrl != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "client_redirect_url", r.clientRedirectUrl, "")
	}
	if r.enableApp2app != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enable_app2app", r.enableApp2app, "")
	}
	if r.referralSource != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referral_source", r.referralSource, "")
	}
	if r.skipAggregation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "skip_aggregation", r.skipAggregation, "")
	}
	if r.uiMessageWebviewUrlScheme != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ui_message_webview_url_scheme", r.uiMessageWebviewUrlScheme, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRequestWidgetURLRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	widgetRequestBody *WidgetRequestBody
	acceptLanguage *string
}

// The widget url configuration options.
func (r ApiRequestWidgetURLRequest) WidgetRequestBody(widgetRequestBody WidgetRequestBody) ApiRequestWidgetURLRequest {
	r.widgetRequestBody = &widgetRequestBody
	return r
}

// The desired language of the widget.
func (r ApiRequestWidgetURLRequest) AcceptLanguage(acceptLanguage string) ApiRequestWidgetURLRequest {
	r.acceptLanguage = &acceptLanguage
	return r
}

func (r ApiRequestWidgetURLRequest) Execute() (*WidgetResponseBody, *http.Response, error) {
	return r.ApiService.RequestWidgetURLExecute(r)
}

/*
RequestWidgetURL Request widget url

This endpoint allows partners to get a URL by passing the `widget_type` in the request body, as well as configuring it in several different ways. In the case of Connect, that means setting the `widget_type` to `connect_widget`. Partners may also pass an optional `Accept-Language` header as well as a number of configuration options. Note that this is a `POST` request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiRequestWidgetURLRequest
*/
func (a *MxPlatformAPIService) RequestWidgetURL(ctx context.Context, userGuid string) ApiRequestWidgetURLRequest {
	return ApiRequestWidgetURLRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return WidgetResponseBody
func (a *MxPlatformAPIService) RequestWidgetURLExecute(r ApiRequestWidgetURLRequest) (*WidgetResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WidgetResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.RequestWidgetURL")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/widget_urls"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.widgetRequestBody == nil {
		return localVarReturnValue, nil, reportError("widgetRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.acceptLanguage != nil {
		parameterAddToHeaderOrQuery(localVarHeaderParams, "Accept-Language", r.acceptLanguage, "")
	}
	// body params
	localVarPostBody = r.widgetRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResumeAggregationRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	memberResumeRequestBody *MemberResumeRequestBody
}

// Member object with MFA challenge answers
func (r ApiResumeAggregationRequest) MemberResumeRequestBody(memberResumeRequestBody MemberResumeRequestBody) ApiResumeAggregationRequest {
	r.memberResumeRequestBody = &memberResumeRequestBody
	return r
}

func (r ApiResumeAggregationRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.ResumeAggregationExecute(r)
}

/*
ResumeAggregation Resume aggregation

This endpoint answers the challenges needed when a member has been challenged by multi-factor authentication.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiResumeAggregationRequest
*/
func (a *MxPlatformAPIService) ResumeAggregation(ctx context.Context, memberGuid string, userGuid string) ApiResumeAggregationRequest {
	return ApiResumeAggregationRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) ResumeAggregationExecute(r ApiResumeAggregationRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.ResumeAggregation")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/resume"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberResumeRequestBody == nil {
		return localVarReturnValue, nil, reportError("memberResumeRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.memberResumeRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAccountByMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	userGuid string
	accountUpdateRequestBody *AccountUpdateRequestBody
}

// Account object to be created with optional parameters (is_hidden)
func (r ApiUpdateAccountByMemberRequest) AccountUpdateRequestBody(accountUpdateRequestBody AccountUpdateRequestBody) ApiUpdateAccountByMemberRequest {
	r.accountUpdateRequestBody = &accountUpdateRequestBody
	return r
}

func (r ApiUpdateAccountByMemberRequest) Execute() (*AccountResponseBody, *http.Response, error) {
	return r.ApiService.UpdateAccountByMemberExecute(r)
}

/*
UpdateAccountByMember Update account by member

This endpoint allows you to update certain attributes of an `account` resource.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateAccountByMemberRequest
*/
func (a *MxPlatformAPIService) UpdateAccountByMember(ctx context.Context, accountGuid string, memberGuid string, userGuid string) ApiUpdateAccountByMemberRequest {
	return ApiUpdateAccountByMemberRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountResponseBody
func (a *MxPlatformAPIService) UpdateAccountByMemberExecute(r ApiUpdateAccountByMemberRequest) (*AccountResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateAccountByMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/accounts/{account_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("accountUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateCategoryRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	categoryGuid string
	userGuid string
	categoryUpdateRequestBody *CategoryUpdateRequestBody
}

// Category object to be updated (While no single parameter is required, the &#x60;category&#x60; object cannot be empty)
func (r ApiUpdateCategoryRequest) CategoryUpdateRequestBody(categoryUpdateRequestBody CategoryUpdateRequestBody) ApiUpdateCategoryRequest {
	r.categoryUpdateRequestBody = &categoryUpdateRequestBody
	return r
}

func (r ApiUpdateCategoryRequest) Execute() (*CategoryResponseBody, *http.Response, error) {
	return r.ApiService.UpdateCategoryExecute(r)
}

/*
UpdateCategory Update category

Use this endpoint to update the attributes of a custom category according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param categoryGuid The unique id for a `category`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateCategoryRequest
*/
func (a *MxPlatformAPIService) UpdateCategory(ctx context.Context, categoryGuid string, userGuid string) ApiUpdateCategoryRequest {
	return ApiUpdateCategoryRequest{
		ApiService: a,
		ctx: ctx,
		categoryGuid: categoryGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return CategoryResponseBody
func (a *MxPlatformAPIService) UpdateCategoryExecute(r ApiUpdateCategoryRequest) (*CategoryResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CategoryResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateCategory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/categories/{category_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"category_guid"+"}", url.PathEscape(parameterValueToString(r.categoryGuid, "categoryGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.categoryUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("categoryUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.categoryUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateManagedAccountRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	userGuid string
	managedAccountUpdateRequestBody *ManagedAccountUpdateRequestBody
}

// Managed account object to be updated (While no single parameter is required, the request body can&#39;t be empty)
func (r ApiUpdateManagedAccountRequest) ManagedAccountUpdateRequestBody(managedAccountUpdateRequestBody ManagedAccountUpdateRequestBody) ApiUpdateManagedAccountRequest {
	r.managedAccountUpdateRequestBody = &managedAccountUpdateRequestBody
	return r
}

func (r ApiUpdateManagedAccountRequest) Execute() (*AccountResponseBody, *http.Response, error) {
	return r.ApiService.UpdateManagedAccountExecute(r)
}

/*
UpdateManagedAccount Update managed account

Use this endpoint to update the attributes of a partner-managed account according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateManagedAccountRequest
*/
func (a *MxPlatformAPIService) UpdateManagedAccount(ctx context.Context, accountGuid string, memberGuid string, userGuid string) ApiUpdateManagedAccountRequest {
	return ApiUpdateManagedAccountRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return AccountResponseBody
func (a *MxPlatformAPIService) UpdateManagedAccountExecute(r ApiUpdateManagedAccountRequest) (*AccountResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateManagedAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedAccountUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("managedAccountUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managedAccountUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateManagedMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	managedMemberUpdateRequestBody *ManagedMemberUpdateRequestBody
}

// Managed member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
func (r ApiUpdateManagedMemberRequest) ManagedMemberUpdateRequestBody(managedMemberUpdateRequestBody ManagedMemberUpdateRequestBody) ApiUpdateManagedMemberRequest {
	r.managedMemberUpdateRequestBody = &managedMemberUpdateRequestBody
	return r
}

func (r ApiUpdateManagedMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.UpdateManagedMemberExecute(r)
}

/*
UpdateManagedMember Update managed member

Use this endpoint to update the attributes of the specified partner_managed `member`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateManagedMemberRequest
*/
func (a *MxPlatformAPIService) UpdateManagedMember(ctx context.Context, memberGuid string, userGuid string) ApiUpdateManagedMemberRequest {
	return ApiUpdateManagedMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) UpdateManagedMemberExecute(r ApiUpdateManagedMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateManagedMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedMemberUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("managedMemberUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managedMemberUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateManagedTransactionRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	accountGuid string
	memberGuid string
	transactionGuid string
	userGuid string
	managedTransactionUpdateRequestBody *ManagedTransactionUpdateRequestBody
}

// Managed transaction object to be updated (While no single parameter is required, the request body can&#39;t be empty)
func (r ApiUpdateManagedTransactionRequest) ManagedTransactionUpdateRequestBody(managedTransactionUpdateRequestBody ManagedTransactionUpdateRequestBody) ApiUpdateManagedTransactionRequest {
	r.managedTransactionUpdateRequestBody = &managedTransactionUpdateRequestBody
	return r
}

func (r ApiUpdateManagedTransactionRequest) Execute() (*TransactionResponseBody, *http.Response, error) {
	return r.ApiService.UpdateManagedTransactionExecute(r)
}

/*
UpdateManagedTransaction Update managed transaction

Use this endpoint to update the attributes of the specified partner_managed `transaction`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param accountGuid The unique id for an `account`.
 @param memberGuid The unique id for a `member`.
 @param transactionGuid The unique id for a `transaction`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateManagedTransactionRequest
*/
func (a *MxPlatformAPIService) UpdateManagedTransaction(ctx context.Context, accountGuid string, memberGuid string, transactionGuid string, userGuid string) ApiUpdateManagedTransactionRequest {
	return ApiUpdateManagedTransactionRequest{
		ApiService: a,
		ctx: ctx,
		accountGuid: accountGuid,
		memberGuid: memberGuid,
		transactionGuid: transactionGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionResponseBody
func (a *MxPlatformAPIService) UpdateManagedTransactionExecute(r ApiUpdateManagedTransactionRequest) (*TransactionResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateManagedTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/managed_members/{member_guid}/accounts/{account_guid}/transactions/{transaction_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_guid"+"}", url.PathEscape(parameterValueToString(r.transactionGuid, "transactionGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.managedTransactionUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("managedTransactionUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.managedTransactionUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
	memberUpdateRequestBody *MemberUpdateRequestBody
}

// Member object to be updated (While no single parameter is required, the request body can&#39;t be empty)
func (r ApiUpdateMemberRequest) MemberUpdateRequestBody(memberUpdateRequestBody MemberUpdateRequestBody) ApiUpdateMemberRequest {
	r.memberUpdateRequestBody = &memberUpdateRequestBody
	return r
}

func (r ApiUpdateMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.UpdateMemberExecute(r)
}

/*
UpdateMember Update member

Use this endpoint to update a members attributes. Only the credentials, id, and metadata parameters can be updated. To get a list of the required credentials for the member, use the list member credentials endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateMemberRequest
*/
func (a *MxPlatformAPIService) UpdateMember(ctx context.Context, memberGuid string, userGuid string) ApiUpdateMemberRequest {
	return ApiUpdateMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) UpdateMemberExecute(r ApiUpdateMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.memberUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("memberUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.memberUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTagRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	tagGuid string
	userGuid string
	tagUpdateRequestBody *TagUpdateRequestBody
}

// Tag object to be updated with required parameter (tag_guid)
func (r ApiUpdateTagRequest) TagUpdateRequestBody(tagUpdateRequestBody TagUpdateRequestBody) ApiUpdateTagRequest {
	r.tagUpdateRequestBody = &tagUpdateRequestBody
	return r
}

func (r ApiUpdateTagRequest) Execute() (*TagResponseBody, *http.Response, error) {
	return r.ApiService.UpdateTagExecute(r)
}

/*
UpdateTag Update tag

Use this endpoint to update the name of a specific tag according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param tagGuid The unique id for a `tag`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateTagRequest
*/
func (a *MxPlatformAPIService) UpdateTag(ctx context.Context, tagGuid string, userGuid string) ApiUpdateTagRequest {
	return ApiUpdateTagRequest{
		ApiService: a,
		ctx: ctx,
		tagGuid: tagGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TagResponseBody
func (a *MxPlatformAPIService) UpdateTagExecute(r ApiUpdateTagRequest) (*TagResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TagResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateTag")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/tags/{tag_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"tag_guid"+"}", url.PathEscape(parameterValueToString(r.tagGuid, "tagGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.tagUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("tagUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.tagUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTaggingRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	taggingGuid string
	userGuid string
	taggingUpdateRequestBody *TaggingUpdateRequestBody
}

// Tagging object to be updated with required parameter (tag_guid)
func (r ApiUpdateTaggingRequest) TaggingUpdateRequestBody(taggingUpdateRequestBody TaggingUpdateRequestBody) ApiUpdateTaggingRequest {
	r.taggingUpdateRequestBody = &taggingUpdateRequestBody
	return r
}

func (r ApiUpdateTaggingRequest) Execute() (*TaggingResponseBody, *http.Response, error) {
	return r.ApiService.UpdateTaggingExecute(r)
}

/*
UpdateTagging Update tagging

Use this endpoint to update a tagging.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param taggingGuid The unique id for a `tagging`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateTaggingRequest
*/
func (a *MxPlatformAPIService) UpdateTagging(ctx context.Context, taggingGuid string, userGuid string) ApiUpdateTaggingRequest {
	return ApiUpdateTaggingRequest{
		ApiService: a,
		ctx: ctx,
		taggingGuid: taggingGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TaggingResponseBody
func (a *MxPlatformAPIService) UpdateTaggingExecute(r ApiUpdateTaggingRequest) (*TaggingResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TaggingResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateTagging")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/taggings/{tagging_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"tagging_guid"+"}", url.PathEscape(parameterValueToString(r.taggingGuid, "taggingGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.taggingUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("taggingUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.taggingUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTransactionRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	transactionGuid string
	userGuid string
	transactionUpdateRequestBody *TransactionUpdateRequestBody
}

// Transaction object to be updated with a new description
func (r ApiUpdateTransactionRequest) TransactionUpdateRequestBody(transactionUpdateRequestBody TransactionUpdateRequestBody) ApiUpdateTransactionRequest {
	r.transactionUpdateRequestBody = &transactionUpdateRequestBody
	return r
}

func (r ApiUpdateTransactionRequest) Execute() (*TransactionResponseBody, *http.Response, error) {
	return r.ApiService.UpdateTransactionExecute(r)
}

/*
UpdateTransaction Update transaction

Use this endpoint to update the `description` of a specific transaction according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transactionGuid The unique id for a `transaction`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateTransactionRequest
*/
func (a *MxPlatformAPIService) UpdateTransaction(ctx context.Context, transactionGuid string, userGuid string) ApiUpdateTransactionRequest {
	return ApiUpdateTransactionRequest{
		ApiService: a,
		ctx: ctx,
		transactionGuid: transactionGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionResponseBody
func (a *MxPlatformAPIService) UpdateTransactionExecute(r ApiUpdateTransactionRequest) (*TransactionResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateTransaction")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transactions/{transaction_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_guid"+"}", url.PathEscape(parameterValueToString(r.transactionGuid, "transactionGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transactionUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("transactionUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transactionUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTransactionRuleRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	transactionRuleGuid string
	userGuid string
	transactionRuleUpdateRequestBody *TransactionRuleUpdateRequestBody
}

// TransactionRule object to be updated
func (r ApiUpdateTransactionRuleRequest) TransactionRuleUpdateRequestBody(transactionRuleUpdateRequestBody TransactionRuleUpdateRequestBody) ApiUpdateTransactionRuleRequest {
	r.transactionRuleUpdateRequestBody = &transactionRuleUpdateRequestBody
	return r
}

func (r ApiUpdateTransactionRuleRequest) Execute() (*TransactionRuleResponseBody, *http.Response, error) {
	return r.ApiService.UpdateTransactionRuleExecute(r)
}

/*
UpdateTransactionRule Update transaction_rule

Use this endpoint to update the attributes of a specific transaction rule based on its unique GUID. The API will respond with the updated transaction_rule object. Any attributes not provided will be left unchanged.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transactionRuleGuid The unique id for a `transaction_rule`.
 @param userGuid The unique id for a `user`.
 @return ApiUpdateTransactionRuleRequest
*/
func (a *MxPlatformAPIService) UpdateTransactionRule(ctx context.Context, transactionRuleGuid string, userGuid string) ApiUpdateTransactionRuleRequest {
	return ApiUpdateTransactionRuleRequest{
		ApiService: a,
		ctx: ctx,
		transactionRuleGuid: transactionRuleGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return TransactionRuleResponseBody
func (a *MxPlatformAPIService) UpdateTransactionRuleExecute(r ApiUpdateTransactionRuleRequest) (*TransactionRuleResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionRuleResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateTransactionRule")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transaction_rules/{transaction_rule_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_rule_guid"+"}", url.PathEscape(parameterValueToString(r.transactionRuleGuid, "transactionRuleGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transactionRuleUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("transactionRuleUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transactionRuleUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateUserRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	userUpdateRequestBody *UserUpdateRequestBody
}

// User object to be updated (None of these parameters are required, but the user object cannot be empty.)
func (r ApiUpdateUserRequest) UserUpdateRequestBody(userUpdateRequestBody UserUpdateRequestBody) ApiUpdateUserRequest {
	r.userUpdateRequestBody = &userUpdateRequestBody
	return r
}

func (r ApiUpdateUserRequest) Execute() (*UserResponseBody, *http.Response, error) {
	return r.ApiService.UpdateUserExecute(r)
}

/*
UpdateUser Update user

Use this endpoint to update the attributes of the specified user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique id for a `user`.
 @return ApiUpdateUserRequest
*/
func (a *MxPlatformAPIService) UpdateUser(ctx context.Context, userGuid string) ApiUpdateUserRequest {
	return ApiUpdateUserRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return UserResponseBody
func (a *MxPlatformAPIService) UpdateUserExecute(r ApiUpdateUserRequest) (*UserResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UserResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UpdateUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.userUpdateRequestBody == nil {
		return localVarReturnValue, nil, reportError("userUpdateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.userUpdateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidMonthlyCashFlowProfileGetRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
}

func (r ApiUsersUserGuidMonthlyCashFlowProfileGetRequest) Execute() (*MonthlyCashFlowResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidMonthlyCashFlowProfileGetExecute(r)
}

/*
UsersUserGuidMonthlyCashFlowProfileGet Read monthly cash flow profile

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user.
 @return ApiUsersUserGuidMonthlyCashFlowProfileGetRequest
*/
func (a *MxPlatformAPIService) UsersUserGuidMonthlyCashFlowProfileGet(ctx context.Context, userGuid string) ApiUsersUserGuidMonthlyCashFlowProfileGetRequest {
	return ApiUsersUserGuidMonthlyCashFlowProfileGetRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MonthlyCashFlowResponseBody
func (a *MxPlatformAPIService) UsersUserGuidMonthlyCashFlowProfileGetExecute(r ApiUsersUserGuidMonthlyCashFlowProfileGetRequest) (*MonthlyCashFlowResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonthlyCashFlowResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UsersUserGuidMonthlyCashFlowProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/monthly_cash_flow_profile"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidMonthlyCashFlowProfilePutRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	monthlyCashFlowProfileRequestBody *MonthlyCashFlowProfileRequestBody
}

func (r ApiUsersUserGuidMonthlyCashFlowProfilePutRequest) MonthlyCashFlowProfileRequestBody(monthlyCashFlowProfileRequestBody MonthlyCashFlowProfileRequestBody) ApiUsersUserGuidMonthlyCashFlowProfilePutRequest {
	r.monthlyCashFlowProfileRequestBody = &monthlyCashFlowProfileRequestBody
	return r
}

func (r ApiUsersUserGuidMonthlyCashFlowProfilePutRequest) Execute() (*MonthlyCashFlowResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidMonthlyCashFlowProfilePutExecute(r)
}

/*
UsersUserGuidMonthlyCashFlowProfilePut Update monthly cash flow profile

Use this endpoint to update the attributes of a `monthly_cash_flow_profile`.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user.
 @return ApiUsersUserGuidMonthlyCashFlowProfilePutRequest
*/
func (a *MxPlatformAPIService) UsersUserGuidMonthlyCashFlowProfilePut(ctx context.Context, userGuid string) ApiUsersUserGuidMonthlyCashFlowProfilePutRequest {
	return ApiUsersUserGuidMonthlyCashFlowProfilePutRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MonthlyCashFlowResponseBody
func (a *MxPlatformAPIService) UsersUserGuidMonthlyCashFlowProfilePutExecute(r ApiUsersUserGuidMonthlyCashFlowProfilePutRequest) (*MonthlyCashFlowResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MonthlyCashFlowResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UsersUserGuidMonthlyCashFlowProfilePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/monthly_cash_flow_profile"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.monthlyCashFlowProfileRequestBody == nil {
		return localVarReturnValue, nil, reportError("monthlyCashFlowProfileRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.monthlyCashFlowProfileRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidTransactionsTransactionGuidSplitDeleteRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	transactionGuid string
	userGuid string
}

func (r ApiUsersUserGuidTransactionsTransactionGuidSplitDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UsersUserGuidTransactionsTransactionGuidSplitDeleteExecute(r)
}

/*
UsersUserGuidTransactionsTransactionGuidSplitDelete Delete split transactions

This endpoint deletes all split transactions linked to a parent transaction, but it leaves the parent transaction active. This request will also update the parent transaction's has_been_split field to false. This endpoint accepts the optional MX-Skip-Webhook header.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param transactionGuid The unique id for a `transaction`.
 @param userGuid The unique id for a `user`.
 @return ApiUsersUserGuidTransactionsTransactionGuidSplitDeleteRequest
*/
func (a *MxPlatformAPIService) UsersUserGuidTransactionsTransactionGuidSplitDelete(ctx context.Context, transactionGuid string, userGuid string) ApiUsersUserGuidTransactionsTransactionGuidSplitDeleteRequest {
	return ApiUsersUserGuidTransactionsTransactionGuidSplitDeleteRequest{
		ApiService: a,
		ctx: ctx,
		transactionGuid: transactionGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MxPlatformAPIService) UsersUserGuidTransactionsTransactionGuidSplitDeleteExecute(r ApiUsersUserGuidTransactionsTransactionGuidSplitDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UsersUserGuidTransactionsTransactionGuidSplitDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transactions/{transaction_guid}/split"
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_guid"+"}", url.PathEscape(parameterValueToString(r.transactionGuid, "transactionGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	userGuid string
	transactionGuid string
	splitTransactionRequestBody *SplitTransactionRequestBody
}

func (r ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest) SplitTransactionRequestBody(splitTransactionRequestBody SplitTransactionRequestBody) ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest {
	r.splitTransactionRequestBody = &splitTransactionRequestBody
	return r
}

func (r ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest) Execute() (*SplitTransactionsResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidTransactionsTransactionGuidSplitPostExecute(r)
}

/*
UsersUserGuidTransactionsTransactionGuidSplitPost Create split transactions

This endpoint creates two or more child transactions that are branched from a previous transaction. This endpoint allows you to link multiple categories, descriptions, and amounts to a parent transaction.  When a split transaction is created, the parent transaction's `has_been_split` field will automatically be updated to true and the child transactions' `parent_guid` will have the transaction guid of the parent. The total amount of the child transactions must equal the amount of the parent transaction. Once a transaction has been split it can't be split again.    In order to re-split a transaction, it must first be un-split. This can be done by calling the Delete Split Transactions endpoint. Calling this endpoint will delete the existing child transactions and update the parent transaction's `has_been_split` field to false. You can then re-split the parent transaction by calling Create Split Transaction again.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param transactionGuid The unique identifier for the transaction. Defined by MX.
 @return ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest
*/
func (a *MxPlatformAPIService) UsersUserGuidTransactionsTransactionGuidSplitPost(ctx context.Context, userGuid string, transactionGuid string) ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest {
	return ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		transactionGuid: transactionGuid,
	}
}

// Execute executes the request
//  @return SplitTransactionsResponseBody
func (a *MxPlatformAPIService) UsersUserGuidTransactionsTransactionGuidSplitPostExecute(r ApiUsersUserGuidTransactionsTransactionGuidSplitPostRequest) (*SplitTransactionsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SplitTransactionsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.UsersUserGuidTransactionsTransactionGuidSplitPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/transactions/{transaction_guid}/split"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transaction_guid"+"}", url.PathEscape(parameterValueToString(r.transactionGuid, "transactionGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.splitTransactionRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVerifyMemberRequest struct {
	ctx context.Context
	ApiService *MxPlatformAPIService
	memberGuid string
	userGuid string
}

func (r ApiVerifyMemberRequest) Execute() (*MemberResponseBody, *http.Response, error) {
	return r.ApiService.VerifyMemberExecute(r)
}

/*
VerifyMember Verify member

The verify endpoint begins a verification process for a member.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param memberGuid The unique id for a `member`.
 @param userGuid The unique id for a `user`.
 @return ApiVerifyMemberRequest
*/
func (a *MxPlatformAPIService) VerifyMember(ctx context.Context, memberGuid string, userGuid string) ApiVerifyMemberRequest {
	return ApiVerifyMemberRequest{
		ApiService: a,
		ctx: ctx,
		memberGuid: memberGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MemberResponseBody
func (a *MxPlatformAPIService) VerifyMemberExecute(r ApiVerifyMemberRequest) (*MemberResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MemberResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MxPlatformAPIService.VerifyMember")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/members/{member_guid}/verify"
	localVarPath = strings.Replace(localVarPath, "{"+"member_guid"+"}", url.PathEscape(parameterValueToString(r.memberGuid, "memberGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
