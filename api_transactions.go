/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// TransactionsAPIService TransactionsAPI service
type TransactionsAPIService service

type ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest struct {
	ctx context.Context
	ApiService *TransactionsAPIService
	userGuid string
	accountGuid string
	transactionCreateRequestBody *TransactionCreateRequestBody
}

func (r ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest) TransactionCreateRequestBody(transactionCreateRequestBody TransactionCreateRequestBody) ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest {
	r.transactionCreateRequestBody = &transactionCreateRequestBody
	return r
}

func (r ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest) Execute() (*TransactionCreateResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidAccountsAccountGuidTransactionsPostExecute(r)
}

/*
UsersUserGuidAccountsAccountGuidTransactionsPost Create manual transaction

This endpoint can only be used to create manual transactions that are under a manual account. This endpoint accepts the optional MX-Skip-Webhook header and skip_webhook parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user.
 @param accountGuid The unique identifier for the account.
 @return ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest
*/
func (a *TransactionsAPIService) UsersUserGuidAccountsAccountGuidTransactionsPost(ctx context.Context, userGuid string, accountGuid string) ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest {
	return ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		accountGuid: accountGuid,
	}
}

// Execute executes the request
//  @return TransactionCreateResponseBody
func (a *TransactionsAPIService) UsersUserGuidAccountsAccountGuidTransactionsPostExecute(r ApiUsersUserGuidAccountsAccountGuidTransactionsPostRequest) (*TransactionCreateResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TransactionCreateResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransactionsAPIService.UsersUserGuidAccountsAccountGuidTransactionsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/accounts/{account_guid}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"account_guid"+"}", url.PathEscape(parameterValueToString(r.accountGuid, "accountGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.transactionCreateRequestBody == nil {
		return localVarReturnValue, nil, reportError("transactionCreateRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.mx.api.v1+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.transactionCreateRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
