/*
MX Platform API

Testing InsightsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mxplatformgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mxenabled/mx-platform-go"
)

func Test_mxplatformgo_InsightsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InsightsAPIService ListAccountsInsight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var insightGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ListAccountsInsight(context.Background(), userGuid, insightGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService ListCategoriesInsight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var insightGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ListCategoriesInsight(context.Background(), userGuid, insightGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService ListInsightsByAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var userGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ListInsightsByAccount(context.Background(), accountGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService ListInsightsUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ListInsightsUser(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService ListMerchantsInsight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var insightGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ListMerchantsInsight(context.Background(), userGuid, insightGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService ListScheduledPaymentsInsight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var insightGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ListScheduledPaymentsInsight(context.Background(), userGuid, insightGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService ListTransactionsInsight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var insightGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ListTransactionsInsight(context.Background(), userGuid, insightGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService ReadInsightsUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var insightGuid string

		resp, httpRes, err := apiClient.InsightsAPI.ReadInsightsUser(context.Background(), userGuid, insightGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InsightsAPIService UpdateInsight", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var insightGuid string

		resp, httpRes, err := apiClient.InsightsAPI.UpdateInsight(context.Background(), userGuid, insightGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
