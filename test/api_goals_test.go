/*
MX Platform API

Testing GoalsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mxplatformgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mxenabled/mx-platform-go"
)

func Test_mxplatformgo_GoalsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GoalsAPIService UsersUserGuidGoalsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.GoalsAPI.UsersUserGuidGoalsGet(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoalsAPIService UsersUserGuidGoalsGoalGuidDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var goalGuid string
		var userGuid string

		httpRes, err := apiClient.GoalsAPI.UsersUserGuidGoalsGoalGuidDelete(context.Background(), goalGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoalsAPIService UsersUserGuidGoalsGoalGuidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var goalGuid string
		var userGuid string

		resp, httpRes, err := apiClient.GoalsAPI.UsersUserGuidGoalsGoalGuidGet(context.Background(), goalGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoalsAPIService UsersUserGuidGoalsGoalGuidPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var goalGuid string
		var userGuid string

		resp, httpRes, err := apiClient.GoalsAPI.UsersUserGuidGoalsGoalGuidPut(context.Background(), goalGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoalsAPIService UsersUserGuidGoalsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.GoalsAPI.UsersUserGuidGoalsPost(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GoalsAPIService UsersUserGuidGoalsRepositionPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.GoalsAPI.UsersUserGuidGoalsRepositionPut(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
