/*
MX Platform API

Testing BudgetsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mxplatformgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mxenabled/mx-platform-go"
)

func Test_mxplatformgo_BudgetsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BudgetsAPIService UsersUserGuidBudgetsBudgetGuidDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var budgetGuid string

		httpRes, err := apiClient.BudgetsAPI.UsersUserGuidBudgetsBudgetGuidDelete(context.Background(), userGuid, budgetGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsAPIService UsersUserGuidBudgetsBudgetGuidGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var budgetGuid string
		var userGuid string

		resp, httpRes, err := apiClient.BudgetsAPI.UsersUserGuidBudgetsBudgetGuidGet(context.Background(), budgetGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsAPIService UsersUserGuidBudgetsBudgetGuidPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var budgetGuid string

		resp, httpRes, err := apiClient.BudgetsAPI.UsersUserGuidBudgetsBudgetGuidPut(context.Background(), userGuid, budgetGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsAPIService UsersUserGuidBudgetsGeneratePost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.BudgetsAPI.UsersUserGuidBudgetsGeneratePost(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsAPIService UsersUserGuidBudgetsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.BudgetsAPI.UsersUserGuidBudgetsGet(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BudgetsAPIService UsersUserGuidBudgetsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.BudgetsAPI.UsersUserGuidBudgetsPost(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
