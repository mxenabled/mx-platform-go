/*
MX Platform API

Testing MxPlatformAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mxplatformgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mxenabled/mx-platform-go"
)

func Test_mxplatformgo_MxPlatformAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MxPlatformAPIService AggregateMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.AggregateMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CheckBalances", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CheckBalances(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateCategory(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateManagedAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateManagedAccount(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateManagedMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateManagedMember(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateManagedTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateManagedTransaction(context.Background(), accountGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateManualAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateManualAccount(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateMember(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateTag(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateTagging", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateTagging(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateTransactionRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateTransactionRule(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.CreateUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService CreditCard", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var creditCardProductGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.CreditCard(context.Background(), creditCardProductGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteCategory(context.Background(), categoryGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteManagedAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteManagedAccount(context.Background(), accountGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteManagedMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteManagedMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteManagedTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var transactionGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteManagedTransaction(context.Background(), accountGuid, memberGuid, transactionGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteManualAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteManualAccount(context.Background(), accountGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteTag(context.Background(), tagGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteTagging", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taggingGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteTagging(context.Background(), taggingGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteTransactionRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionRuleGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteTransactionRule(context.Background(), transactionRuleGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeleteUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.DeleteUser(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DeprecatedRequestPaymentProcessorAuthorizationCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.DeprecatedRequestPaymentProcessorAuthorizationCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DownloadStatementPDF", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var statementGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.DownloadStatementPDF(context.Background(), memberGuid, statementGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService DownloadTaxDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxDocumentGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.DownloadTaxDocument(context.Background(), taxDocumentGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService EnhanceTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.EnhanceTransactions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ExtendHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ExtendHistory(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService FetchRewards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var memberGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.FetchRewards(context.Background(), userGuid, memberGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService FetchStatements", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.FetchStatements(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService FetchTaxDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.FetchTaxDocuments(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService IdentifyMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.IdentifyMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListAccountNumbersByAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListAccountNumbersByAccount(context.Background(), accountGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListAccountNumbersByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListAccountNumbersByMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListAccountOwnersByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListAccountOwnersByMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListCategories(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListDefaultCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.ListDefaultCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListDefaultCategoriesByUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListDefaultCategoriesByUser(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListFavoriteInstitutions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.ListFavoriteInstitutions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListHoldings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListHoldings(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListHoldingsByAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListHoldingsByAccount(context.Background(), accountGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListHoldingsByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListHoldingsByMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListInstitutionCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var institutionCode string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListInstitutionCredentials(context.Background(), institutionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListInstitutions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.ListInstitutions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListManagedAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListManagedAccounts(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListManagedInstitutions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.ListManagedInstitutions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListManagedMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListManagedMembers(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListManagedTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListManagedTransactions(context.Background(), accountGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListMemberAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var memberGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListMemberAccounts(context.Background(), userGuid, memberGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListMemberChallenges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListMemberChallenges(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListMemberCredentials", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListMemberCredentials(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListMembers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListMembers(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListMerchants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.ListMerchants(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListRewards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var memberGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListRewards(context.Background(), userGuid, memberGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListStatementsByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListStatementsByMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTaggings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTaggings(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTags(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTaxDocuments", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTaxDocuments(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTransactionRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTransactionRules(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTransactions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTransactions(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTransactionsByAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTransactionsByAccount(context.Background(), accountGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTransactionsByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTransactionsByMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListTransactionsByTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListTransactionsByTag(context.Background(), tagGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListUserAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ListUserAccounts(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ListUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.ListUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadAccount(context.Background(), accountGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadAccountByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadAccountByMember(context.Background(), accountGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadCategory(context.Background(), categoryGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadDefaultCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadDefaultCategory(context.Background(), categoryGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadHolding", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var holdingGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadHolding(context.Background(), holdingGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadInstitution", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var institutionCode string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadInstitution(context.Background(), institutionCode).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadManagedAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadManagedAccount(context.Background(), accountGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadManagedMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadManagedMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadManagedTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var transactionGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadManagedTransaction(context.Background(), accountGuid, memberGuid, transactionGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadMemberStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadMemberStatus(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadMerchant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadMerchant(context.Background(), merchantGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadMerchantLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantLocationGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadMerchantLocation(context.Background(), merchantLocationGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadRewards", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var memberGuid string
		var rewardGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadRewards(context.Background(), userGuid, memberGuid, rewardGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadStatementByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var statementGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadStatementByMember(context.Background(), memberGuid, statementGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadTag(context.Background(), tagGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadTagging", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taggingGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadTagging(context.Background(), taggingGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadTaxDocument", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taxDocumentGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadTaxDocument(context.Background(), taxDocumentGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadTransaction(context.Background(), transactionGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadTransactionRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionRuleGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadTransactionRule(context.Background(), transactionRuleGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ReadUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ReadUser(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService RequestAuthorizationCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MxPlatformAPI.RequestAuthorizationCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService RequestConnectWidgetURL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.RequestConnectWidgetURL(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService RequestOAuthWindowURI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.RequestOAuthWindowURI(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService RequestWidgetURL", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.RequestWidgetURL(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService ResumeAggregation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.ResumeAggregation(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateAccountByMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateAccountByMember(context.Background(), accountGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var categoryGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateCategory(context.Background(), categoryGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateManagedAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateManagedAccount(context.Background(), accountGuid, memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateManagedMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateManagedMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateManagedTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var accountGuid string
		var memberGuid string
		var transactionGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateManagedTransaction(context.Background(), accountGuid, memberGuid, transactionGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tagGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateTag(context.Background(), tagGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateTagging", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var taggingGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateTagging(context.Background(), taggingGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateTransaction", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateTransaction(context.Background(), transactionGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateTransactionRule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionRuleGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateTransactionRule(context.Background(), transactionRuleGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UpdateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UpdateUser(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UsersUserGuidMonthlyCashFlowProfileGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UsersUserGuidMonthlyCashFlowProfileGet(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UsersUserGuidMonthlyCashFlowProfilePut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UsersUserGuidMonthlyCashFlowProfilePut(context.Background(), userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UsersUserGuidTransactionsTransactionGuidSplitDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var transactionGuid string
		var userGuid string

		httpRes, err := apiClient.MxPlatformAPI.UsersUserGuidTransactionsTransactionGuidSplitDelete(context.Background(), transactionGuid, userGuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService UsersUserGuidTransactionsTransactionGuidSplitPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userGuid string
		var transactionGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.UsersUserGuidTransactionsTransactionGuidSplitPost(context.Background(), userGuid, transactionGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MxPlatformAPIService VerifyMember", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var memberGuid string
		var userGuid string

		resp, httpRes, err := apiClient.MxPlatformAPI.VerifyMember(context.Background(), memberGuid, userGuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
