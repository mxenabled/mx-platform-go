/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"encoding/json"
)

// checks if the SplitTransactionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplitTransactionRequest{}

// SplitTransactionRequest struct for SplitTransactionRequest
type SplitTransactionRequest struct {
	// Amount of money you want to re-categorize.
	Amount float32 `json:"amount"`
	// Description for the split transaction.
	Description *string `json:"description,omitempty"`
	// Unique identifier of the category.
	CategoryGuid *string `json:"category_guid,omitempty"`
	// Memo for the split transaction
	Memo *string `json:"memo,omitempty"`
}

// NewSplitTransactionRequest instantiates a new SplitTransactionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplitTransactionRequest(amount float32) *SplitTransactionRequest {
	this := SplitTransactionRequest{}
	this.Amount = amount
	return &this
}

// NewSplitTransactionRequestWithDefaults instantiates a new SplitTransactionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplitTransactionRequestWithDefaults() *SplitTransactionRequest {
	this := SplitTransactionRequest{}
	return &this
}

// GetAmount returns the Amount field value
func (o *SplitTransactionRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *SplitTransactionRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *SplitTransactionRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SplitTransactionRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitTransactionRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SplitTransactionRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SplitTransactionRequest) SetDescription(v string) {
	o.Description = &v
}

// GetCategoryGuid returns the CategoryGuid field value if set, zero value otherwise.
func (o *SplitTransactionRequest) GetCategoryGuid() string {
	if o == nil || IsNil(o.CategoryGuid) {
		var ret string
		return ret
	}
	return *o.CategoryGuid
}

// GetCategoryGuidOk returns a tuple with the CategoryGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitTransactionRequest) GetCategoryGuidOk() (*string, bool) {
	if o == nil || IsNil(o.CategoryGuid) {
		return nil, false
	}
	return o.CategoryGuid, true
}

// HasCategoryGuid returns a boolean if a field has been set.
func (o *SplitTransactionRequest) HasCategoryGuid() bool {
	if o != nil && !IsNil(o.CategoryGuid) {
		return true
	}

	return false
}

// SetCategoryGuid gets a reference to the given string and assigns it to the CategoryGuid field.
func (o *SplitTransactionRequest) SetCategoryGuid(v string) {
	o.CategoryGuid = &v
}

// GetMemo returns the Memo field value if set, zero value otherwise.
func (o *SplitTransactionRequest) GetMemo() string {
	if o == nil || IsNil(o.Memo) {
		var ret string
		return ret
	}
	return *o.Memo
}

// GetMemoOk returns a tuple with the Memo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplitTransactionRequest) GetMemoOk() (*string, bool) {
	if o == nil || IsNil(o.Memo) {
		return nil, false
	}
	return o.Memo, true
}

// HasMemo returns a boolean if a field has been set.
func (o *SplitTransactionRequest) HasMemo() bool {
	if o != nil && !IsNil(o.Memo) {
		return true
	}

	return false
}

// SetMemo gets a reference to the given string and assigns it to the Memo field.
func (o *SplitTransactionRequest) SetMemo(v string) {
	o.Memo = &v
}

func (o SplitTransactionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplitTransactionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.CategoryGuid) {
		toSerialize["category_guid"] = o.CategoryGuid
	}
	if !IsNil(o.Memo) {
		toSerialize["memo"] = o.Memo
	}
	return toSerialize, nil
}

type NullableSplitTransactionRequest struct {
	value *SplitTransactionRequest
	isSet bool
}

func (v NullableSplitTransactionRequest) Get() *SplitTransactionRequest {
	return v.value
}

func (v *NullableSplitTransactionRequest) Set(val *SplitTransactionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSplitTransactionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSplitTransactionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplitTransactionRequest(val *SplitTransactionRequest) *NullableSplitTransactionRequest {
	return &NullableSplitTransactionRequest{value: val, isSet: true}
}

func (v NullableSplitTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplitTransactionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


