/*
MX Platform API

The MX Platform API is a powerful, fully-featured API designed to make aggregating and enhancing financial data easy and reliable. It can seamlessly connect your app or website to tens of thousands of financial institutions.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mxplatformgo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MicrodepositsAPIService MicrodepositsAPI service
type MicrodepositsAPIService service

type ApiMicroDepositsMicrodepositGuidVerifyPutRequest struct {
	ctx context.Context
	ApiService *MicrodepositsAPIService
	microdepositGuid string
	microdepositVerifyRequestBody *MicrodepositVerifyRequestBody
}

func (r ApiMicroDepositsMicrodepositGuidVerifyPutRequest) MicrodepositVerifyRequestBody(microdepositVerifyRequestBody MicrodepositVerifyRequestBody) ApiMicroDepositsMicrodepositGuidVerifyPutRequest {
	r.microdepositVerifyRequestBody = &microdepositVerifyRequestBody
	return r
}

func (r ApiMicroDepositsMicrodepositGuidVerifyPutRequest) Execute() (*MicrodepositResponseBody, *http.Response, error) {
	return r.ApiService.MicroDepositsMicrodepositGuidVerifyPutExecute(r)
}

/*
MicroDepositsMicrodepositGuidVerifyPut Verify a Microdeposit

Use this endpoint to verify the amounts deposited into the account during a microdeposit verification. The verification has not successfully completed until the `status` is `VERIFIED`. Poll the `/users/{user_guid}/micro_deposits/{micro_deposit_guid}` (read microdeposit) endpoint until you see this status or an error state.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microdepositGuid The unique identifier for the microdeposit. Defined by MX.
 @return ApiMicroDepositsMicrodepositGuidVerifyPutRequest
*/
func (a *MicrodepositsAPIService) MicroDepositsMicrodepositGuidVerifyPut(ctx context.Context, microdepositGuid string) ApiMicroDepositsMicrodepositGuidVerifyPutRequest {
	return ApiMicroDepositsMicrodepositGuidVerifyPutRequest{
		ApiService: a,
		ctx: ctx,
		microdepositGuid: microdepositGuid,
	}
}

// Execute executes the request
//  @return MicrodepositResponseBody
func (a *MicrodepositsAPIService) MicroDepositsMicrodepositGuidVerifyPutExecute(r ApiMicroDepositsMicrodepositGuidVerifyPutRequest) (*MicrodepositResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MicrodepositResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MicrodepositsAPIService.MicroDepositsMicrodepositGuidVerifyPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/micro_deposits/{microdeposit_guid}/verify"
	localVarPath = strings.Replace(localVarPath, "{"+"microdeposit_guid"+"}", url.PathEscape(parameterValueToString(r.microdepositGuid, "microdepositGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microdepositVerifyRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidMicroDepositsGetRequest struct {
	ctx context.Context
	ApiService *MicrodepositsAPIService
	userGuid string
}

func (r ApiUsersUserGuidMicroDepositsGetRequest) Execute() (*MicrodepositsResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidMicroDepositsGetExecute(r)
}

/*
UsersUserGuidMicroDepositsGet List all microdeposits for a user

Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @return ApiUsersUserGuidMicroDepositsGetRequest
*/
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsGet(ctx context.Context, userGuid string) ApiUsersUserGuidMicroDepositsGetRequest {
	return ApiUsersUserGuidMicroDepositsGetRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MicrodepositsResponseBody
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsGetExecute(r ApiUsersUserGuidMicroDepositsGetRequest) (*MicrodepositsResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MicrodepositsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MicrodepositsAPIService.UsersUserGuidMicroDepositsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/micro_deposits"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidMicroDepositsMicroDepositGuidDeleteRequest struct {
	ctx context.Context
	ApiService *MicrodepositsAPIService
	microDepositGuid string
	userGuid string
}

func (r ApiUsersUserGuidMicroDepositsMicroDepositGuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UsersUserGuidMicroDepositsMicroDepositGuidDeleteExecute(r)
}

/*
UsersUserGuidMicroDepositsMicroDepositGuidDelete Delete a microdeposit

Use this endpoint to delete the specified microdeposit.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param microDepositGuid The unique identifier for the microdeposit. Defined by MX.
 @param userGuid The unique id for a `user`.
 @return ApiUsersUserGuidMicroDepositsMicroDepositGuidDeleteRequest
*/
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsMicroDepositGuidDelete(ctx context.Context, microDepositGuid string, userGuid string) ApiUsersUserGuidMicroDepositsMicroDepositGuidDeleteRequest {
	return ApiUsersUserGuidMicroDepositsMicroDepositGuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		microDepositGuid: microDepositGuid,
		userGuid: userGuid,
	}
}

// Execute executes the request
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsMicroDepositGuidDeleteExecute(r ApiUsersUserGuidMicroDepositsMicroDepositGuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MicrodepositsAPIService.UsersUserGuidMicroDepositsMicroDepositGuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/micro_deposits/{micro_deposit_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"micro_deposit_guid"+"}", url.PathEscape(parameterValueToString(r.microDepositGuid, "microDepositGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUserGuidMicroDepositsMicroDepositGuidGetRequest struct {
	ctx context.Context
	ApiService *MicrodepositsAPIService
	userGuid string
	microDepositGuid string
}

func (r ApiUsersUserGuidMicroDepositsMicroDepositGuidGetRequest) Execute() (*MicrodepositResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidMicroDepositsMicroDepositGuidGetExecute(r)
}

/*
UsersUserGuidMicroDepositsMicroDepositGuidGet Read a microdeposit for a user

Use this endpoint to read the attributes of a specific microdeposit according to its unique GUID. <br></br> Webhooks for microdeposit status changes are triggered when a status changes. The actual status of the microdeposit guid updates every minute. You may force a status update by calling the read microdeposit endpoint.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @param microDepositGuid The unique identifier for the microdeposit. Defined by MX.
 @return ApiUsersUserGuidMicroDepositsMicroDepositGuidGetRequest
*/
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsMicroDepositGuidGet(ctx context.Context, userGuid string, microDepositGuid string) ApiUsersUserGuidMicroDepositsMicroDepositGuidGetRequest {
	return ApiUsersUserGuidMicroDepositsMicroDepositGuidGetRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
		microDepositGuid: microDepositGuid,
	}
}

// Execute executes the request
//  @return MicrodepositResponseBody
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsMicroDepositGuidGetExecute(r ApiUsersUserGuidMicroDepositsMicroDepositGuidGetRequest) (*MicrodepositResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MicrodepositResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MicrodepositsAPIService.UsersUserGuidMicroDepositsMicroDepositGuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/micro_deposits/{micro_deposit_guid}"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"micro_deposit_guid"+"}", url.PathEscape(parameterValueToString(r.microDepositGuid, "microDepositGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUserGuidMicroDepositsPostRequest struct {
	ctx context.Context
	ApiService *MicrodepositsAPIService
	userGuid string
	microdepositRequestBody *MicrodepositRequestBody
}

func (r ApiUsersUserGuidMicroDepositsPostRequest) MicrodepositRequestBody(microdepositRequestBody MicrodepositRequestBody) ApiUsersUserGuidMicroDepositsPostRequest {
	r.microdepositRequestBody = &microdepositRequestBody
	return r
}

func (r ApiUsersUserGuidMicroDepositsPostRequest) Execute() (*MicrodepositResponseBody, *http.Response, error) {
	return r.ApiService.UsersUserGuidMicroDepositsPostExecute(r)
}

/*
UsersUserGuidMicroDepositsPost Create a microdeposit

Use this endpoint to create a microdeposit. The response will include the new microdeposit record with a status of INITIATED.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userGuid The unique identifier for the user. Defined by MX.
 @return ApiUsersUserGuidMicroDepositsPostRequest
*/
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsPost(ctx context.Context, userGuid string) ApiUsersUserGuidMicroDepositsPostRequest {
	return ApiUsersUserGuidMicroDepositsPostRequest{
		ApiService: a,
		ctx: ctx,
		userGuid: userGuid,
	}
}

// Execute executes the request
//  @return MicrodepositResponseBody
func (a *MicrodepositsAPIService) UsersUserGuidMicroDepositsPostExecute(r ApiUsersUserGuidMicroDepositsPostRequest) (*MicrodepositResponseBody, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MicrodepositResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MicrodepositsAPIService.UsersUserGuidMicroDepositsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user_guid}/micro_deposits"
	localVarPath = strings.Replace(localVarPath, "{"+"user_guid"+"}", url.PathEscape(parameterValueToString(r.userGuid, "userGuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.microdepositRequestBody == nil {
		return localVarReturnValue, nil, reportError("microdepositRequestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microdepositRequestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
